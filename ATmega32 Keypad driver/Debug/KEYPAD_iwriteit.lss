
KEYPAD_iwriteit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f4c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00002f4c  00002fc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000219c  00000000  00000000  00002ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ec3  00000000  00000000  0000518c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000604f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000618f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000062ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008e33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a79b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 56 17 	call	0x2eac	; 0x2eac <main>
      7a:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_voidInit>:
#include "DIO_cfg.h"
#include "DIO_priv.h"


void DIO_voidInit(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
   DDRA = CONC(DIO_PIN_DIR_7 ,DIO_PIN_DIR_6 ,DIO_PIN_DIR_5 ,DIO_PIN_DIR_4 ,DIO_PIN_DIR_3 ,DIO_PIN_DIR_2 ,DIO_PIN_DIR_1 ,DIO_PIN_DIR_0 );
     b3e:	ea e3       	ldi	r30, 0x3A	; 58
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 ef       	ldi	r24, 0xF0	; 240
     b44:	80 83       	st	Z, r24
   DDRB = CONC(DIO_PIN_DIR_15,DIO_PIN_DIR_14,DIO_PIN_DIR_13,DIO_PIN_DIR_12,DIO_PIN_DIR_11,DIO_PIN_DIR_10,DIO_PIN_DIR_9 ,DIO_PIN_DIR_8 );
     b46:	e7 e3       	ldi	r30, 0x37	; 55
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	8f ef       	ldi	r24, 0xFF	; 255
     b4c:	80 83       	st	Z, r24
   DDRC = CONC(DIO_PIN_DIR_23,DIO_PIN_DIR_22,DIO_PIN_DIR_21,DIO_PIN_DIR_20,DIO_PIN_DIR_19,DIO_PIN_DIR_18,DIO_PIN_DIR_17,DIO_PIN_DIR_16);
     b4e:	e4 e3       	ldi	r30, 0x34	; 52
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	80 83       	st	Z, r24
   DDRD = CONC(DIO_PIN_DIR_31,DIO_PIN_DIR_30,DIO_PIN_DIR_29,DIO_PIN_DIR_28,DIO_PIN_DIR_27,DIO_PIN_DIR_26,DIO_PIN_DIR_25,DIO_PIN_DIR_24);
     b56:	e1 e3       	ldi	r30, 0x31	; 49
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	80 83       	st	Z, r24

}
     b5e:	cf 91       	pop	r28
     b60:	df 91       	pop	r29
     b62:	08 95       	ret

00000b64 <DIO_enuWritePin>:

tenuErrorStatus DIO_enuWritePin(uint8 u8PinNumCpy,uint8 u8PinValueCpy)
{
     b64:	df 93       	push	r29
     b66:	cf 93       	push	r28
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	2b 97       	sbiw	r28, 0x0b	; 11
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
     b78:	8a 83       	std	Y+2, r24	; 0x02
     b7a:	6b 83       	std	Y+3, r22	; 0x03
	
	tenuErrorStatus enuReturnStateLoc = EOK ;
     b7c:	19 82       	std	Y+1, r1	; 0x01
	if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
     b7e:	8a 81       	ldd	r24, Y+2	; 0x02
     b80:	88 30       	cpi	r24, 0x08	; 8
     b82:	d8 f5       	brcc	.+118    	; 0xbfa <DIO_enuWritePin+0x96>
	{
		switch (u8PinValueCpy)
     b84:	8b 81       	ldd	r24, Y+3	; 0x03
     b86:	28 2f       	mov	r18, r24
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	3b 87       	std	Y+11, r19	; 0x0b
     b8c:	2a 87       	std	Y+10, r18	; 0x0a
     b8e:	8a 85       	ldd	r24, Y+10	; 0x0a
     b90:	9b 85       	ldd	r25, Y+11	; 0x0b
     b92:	00 97       	sbiw	r24, 0x00	; 0
     b94:	31 f0       	breq	.+12     	; 0xba2 <DIO_enuWritePin+0x3e>
     b96:	2a 85       	ldd	r18, Y+10	; 0x0a
     b98:	3b 85       	ldd	r19, Y+11	; 0x0b
     b9a:	21 30       	cpi	r18, 0x01	; 1
     b9c:	31 05       	cpc	r19, r1
     b9e:	b1 f0       	breq	.+44     	; 0xbcc <DIO_enuWritePin+0x68>
     ba0:	29 c0       	rjmp	.+82     	; 0xbf4 <DIO_enuWritePin+0x90>
		{
			case DIO_LOW :
			 CLR_BIT (ODRA ,  u8PinNumCpy);
     ba2:	ab e3       	ldi	r26, 0x3B	; 59
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	eb e3       	ldi	r30, 0x3B	; 59
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	48 2f       	mov	r20, r24
     bae:	8a 81       	ldd	r24, Y+2	; 0x02
     bb0:	28 2f       	mov	r18, r24
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	02 2e       	mov	r0, r18
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <DIO_enuWritePin+0x5c>
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	0a 94       	dec	r0
     bc2:	e2 f7       	brpl	.-8      	; 0xbbc <DIO_enuWritePin+0x58>
     bc4:	80 95       	com	r24
     bc6:	84 23       	and	r24, r20
     bc8:	8c 93       	st	X, r24
     bca:	f4 c0       	rjmp	.+488    	; 0xdb4 <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRA , u8PinNumCpy);
     bcc:	ab e3       	ldi	r26, 0x3B	; 59
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	eb e3       	ldi	r30, 0x3B	; 59
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	48 2f       	mov	r20, r24
     bd8:	8a 81       	ldd	r24, Y+2	; 0x02
     bda:	28 2f       	mov	r18, r24
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	02 2e       	mov	r0, r18
     be4:	02 c0       	rjmp	.+4      	; 0xbea <DIO_enuWritePin+0x86>
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	0a 94       	dec	r0
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <DIO_enuWritePin+0x82>
     bee:	84 2b       	or	r24, r20
     bf0:	8c 93       	st	X, r24
     bf2:	e0 c0       	rjmp	.+448    	; 0xdb4 <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
     bf4:	82 e0       	ldi	r24, 0x02	; 2
     bf6:	89 83       	std	Y+1, r24	; 0x01
     bf8:	dd c0       	rjmp	.+442    	; 0xdb4 <DIO_enuWritePin+0x250>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	88 30       	cpi	r24, 0x08	; 8
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <DIO_enuWritePin+0x9e>
     c00:	45 c0       	rjmp	.+138    	; 0xc8c <DIO_enuWritePin+0x128>
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	80 31       	cpi	r24, 0x10	; 16
     c06:	08 f0       	brcs	.+2      	; 0xc0a <DIO_enuWritePin+0xa6>
     c08:	41 c0       	rjmp	.+130    	; 0xc8c <DIO_enuWritePin+0x128>
	{
		switch (u8PinValueCpy)
     c0a:	8b 81       	ldd	r24, Y+3	; 0x03
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	39 87       	std	Y+9, r19	; 0x09
     c12:	28 87       	std	Y+8, r18	; 0x08
     c14:	88 85       	ldd	r24, Y+8	; 0x08
     c16:	99 85       	ldd	r25, Y+9	; 0x09
     c18:	00 97       	sbiw	r24, 0x00	; 0
     c1a:	31 f0       	breq	.+12     	; 0xc28 <DIO_enuWritePin+0xc4>
     c1c:	28 85       	ldd	r18, Y+8	; 0x08
     c1e:	39 85       	ldd	r19, Y+9	; 0x09
     c20:	21 30       	cpi	r18, 0x01	; 1
     c22:	31 05       	cpc	r19, r1
     c24:	c9 f0       	breq	.+50     	; 0xc58 <DIO_enuWritePin+0xf4>
     c26:	2f c0       	rjmp	.+94     	; 0xc86 <DIO_enuWritePin+0x122>
		{
			case DIO_LOW :
			 CLR_BIT (ODRB ,  u8PinNumCpy%8);
     c28:	a8 e3       	ldi	r26, 0x38	; 56
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	e8 e3       	ldi	r30, 0x38	; 56
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	48 2f       	mov	r20, r24
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	88 2f       	mov	r24, r24
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	9c 01       	movw	r18, r24
     c3c:	27 70       	andi	r18, 0x07	; 7
     c3e:	30 70       	andi	r19, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	02 2e       	mov	r0, r18
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <DIO_enuWritePin+0xe8>
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	0a 94       	dec	r0
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <DIO_enuWritePin+0xe4>
     c50:	80 95       	com	r24
     c52:	84 23       	and	r24, r20
     c54:	8c 93       	st	X, r24
     c56:	ae c0       	rjmp	.+348    	; 0xdb4 <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRB , u8PinNumCpy%8);
     c58:	a8 e3       	ldi	r26, 0x38	; 56
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e8 e3       	ldi	r30, 0x38	; 56
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	48 2f       	mov	r20, r24
     c64:	8a 81       	ldd	r24, Y+2	; 0x02
     c66:	88 2f       	mov	r24, r24
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	9c 01       	movw	r18, r24
     c6c:	27 70       	andi	r18, 0x07	; 7
     c6e:	30 70       	andi	r19, 0x00	; 0
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	02 2e       	mov	r0, r18
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <DIO_enuWritePin+0x118>
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	0a 94       	dec	r0
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <DIO_enuWritePin+0x114>
     c80:	84 2b       	or	r24, r20
     c82:	8c 93       	st	X, r24
     c84:	97 c0       	rjmp	.+302    	; 0xdb4 <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	89 83       	std	Y+1, r24	; 0x01
     c8a:	94 c0       	rjmp	.+296    	; 0xdb4 <DIO_enuWritePin+0x250>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	80 31       	cpi	r24, 0x10	; 16
     c90:	08 f4       	brcc	.+2      	; 0xc94 <DIO_enuWritePin+0x130>
     c92:	45 c0       	rjmp	.+138    	; 0xd1e <DIO_enuWritePin+0x1ba>
     c94:	8a 81       	ldd	r24, Y+2	; 0x02
     c96:	88 31       	cpi	r24, 0x18	; 24
     c98:	08 f0       	brcs	.+2      	; 0xc9c <DIO_enuWritePin+0x138>
     c9a:	41 c0       	rjmp	.+130    	; 0xd1e <DIO_enuWritePin+0x1ba>
	{
		switch (u8PinValueCpy)
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	3f 83       	std	Y+7, r19	; 0x07
     ca4:	2e 83       	std	Y+6, r18	; 0x06
     ca6:	8e 81       	ldd	r24, Y+6	; 0x06
     ca8:	9f 81       	ldd	r25, Y+7	; 0x07
     caa:	00 97       	sbiw	r24, 0x00	; 0
     cac:	31 f0       	breq	.+12     	; 0xcba <DIO_enuWritePin+0x156>
     cae:	2e 81       	ldd	r18, Y+6	; 0x06
     cb0:	3f 81       	ldd	r19, Y+7	; 0x07
     cb2:	21 30       	cpi	r18, 0x01	; 1
     cb4:	31 05       	cpc	r19, r1
     cb6:	c9 f0       	breq	.+50     	; 0xcea <DIO_enuWritePin+0x186>
     cb8:	2f c0       	rjmp	.+94     	; 0xd18 <DIO_enuWritePin+0x1b4>
		{
			case DIO_LOW :
			 CLR_BIT (ODRC ,  u8PinNumCpy%8);
     cba:	a5 e3       	ldi	r26, 0x35	; 53
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e5 e3       	ldi	r30, 0x35	; 53
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	88 2f       	mov	r24, r24
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	9c 01       	movw	r18, r24
     cce:	27 70       	andi	r18, 0x07	; 7
     cd0:	30 70       	andi	r19, 0x00	; 0
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	02 2e       	mov	r0, r18
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <DIO_enuWritePin+0x17a>
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	0a 94       	dec	r0
     ce0:	e2 f7       	brpl	.-8      	; 0xcda <DIO_enuWritePin+0x176>
     ce2:	80 95       	com	r24
     ce4:	84 23       	and	r24, r20
     ce6:	8c 93       	st	X, r24
     ce8:	65 c0       	rjmp	.+202    	; 0xdb4 <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRC , u8PinNumCpy%8);
     cea:	a5 e3       	ldi	r26, 0x35	; 53
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e5 e3       	ldi	r30, 0x35	; 53
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	48 2f       	mov	r20, r24
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	88 2f       	mov	r24, r24
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	9c 01       	movw	r18, r24
     cfe:	27 70       	andi	r18, 0x07	; 7
     d00:	30 70       	andi	r19, 0x00	; 0
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	02 2e       	mov	r0, r18
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <DIO_enuWritePin+0x1aa>
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	0a 94       	dec	r0
     d10:	e2 f7       	brpl	.-8      	; 0xd0a <DIO_enuWritePin+0x1a6>
     d12:	84 2b       	or	r24, r20
     d14:	8c 93       	st	X, r24
     d16:	4e c0       	rjmp	.+156    	; 0xdb4 <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
     d18:	82 e0       	ldi	r24, 0x02	; 2
     d1a:	89 83       	std	Y+1, r24	; 0x01
     d1c:	4b c0       	rjmp	.+150    	; 0xdb4 <DIO_enuWritePin+0x250>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	88 31       	cpi	r24, 0x18	; 24
     d22:	08 f4       	brcc	.+2      	; 0xd26 <DIO_enuWritePin+0x1c2>
     d24:	45 c0       	rjmp	.+138    	; 0xdb0 <DIO_enuWritePin+0x24c>
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	80 32       	cpi	r24, 0x20	; 32
     d2a:	08 f0       	brcs	.+2      	; 0xd2e <DIO_enuWritePin+0x1ca>
     d2c:	41 c0       	rjmp	.+130    	; 0xdb0 <DIO_enuWritePin+0x24c>
	{
		switch (u8PinValueCpy)
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	3d 83       	std	Y+5, r19	; 0x05
     d36:	2c 83       	std	Y+4, r18	; 0x04
     d38:	8c 81       	ldd	r24, Y+4	; 0x04
     d3a:	9d 81       	ldd	r25, Y+5	; 0x05
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	31 f0       	breq	.+12     	; 0xd4c <DIO_enuWritePin+0x1e8>
     d40:	2c 81       	ldd	r18, Y+4	; 0x04
     d42:	3d 81       	ldd	r19, Y+5	; 0x05
     d44:	21 30       	cpi	r18, 0x01	; 1
     d46:	31 05       	cpc	r19, r1
     d48:	c9 f0       	breq	.+50     	; 0xd7c <DIO_enuWritePin+0x218>
     d4a:	2f c0       	rjmp	.+94     	; 0xdaa <DIO_enuWritePin+0x246>
		{
			case DIO_LOW :
			 CLR_BIT (ODRD ,  u8PinNumCpy%8);
     d4c:	a2 e3       	ldi	r26, 0x32	; 50
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e2 e3       	ldi	r30, 0x32	; 50
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	48 2f       	mov	r20, r24
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	88 2f       	mov	r24, r24
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	9c 01       	movw	r18, r24
     d60:	27 70       	andi	r18, 0x07	; 7
     d62:	30 70       	andi	r19, 0x00	; 0
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	02 2e       	mov	r0, r18
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <DIO_enuWritePin+0x20c>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <DIO_enuWritePin+0x208>
     d74:	80 95       	com	r24
     d76:	84 23       	and	r24, r20
     d78:	8c 93       	st	X, r24
     d7a:	1c c0       	rjmp	.+56     	; 0xdb4 <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRD , u8PinNumCpy%8);
     d7c:	a2 e3       	ldi	r26, 0x32	; 50
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e2 e3       	ldi	r30, 0x32	; 50
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	48 2f       	mov	r20, r24
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	88 2f       	mov	r24, r24
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9c 01       	movw	r18, r24
     d90:	27 70       	andi	r18, 0x07	; 7
     d92:	30 70       	andi	r19, 0x00	; 0
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	02 2e       	mov	r0, r18
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <DIO_enuWritePin+0x23c>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	0a 94       	dec	r0
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <DIO_enuWritePin+0x238>
     da4:	84 2b       	or	r24, r20
     da6:	8c 93       	st	X, r24
     da8:	05 c0       	rjmp	.+10     	; 0xdb4 <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
     daa:	82 e0       	ldi	r24, 0x02	; 2
     dac:	89 83       	std	Y+1, r24	; 0x01
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <DIO_enuWritePin+0x250>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_OUT_RANGE ;
     db0:	82 e0       	ldi	r24, 0x02	; 2
     db2:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuReturnStateLoc ;
     db4:	89 81       	ldd	r24, Y+1	; 0x01
	
}     
     db6:	2b 96       	adiw	r28, 0x0b	; 11
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <DIO_enuReadPin>:

tenuErrorStatus DIO_enuReadPin(uint8 u8PinNumCpy ,uint8 * pu8PinValueCpy )
{
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	00 d0       	rcall	.+0      	; 0xdce <DIO_enuReadPin+0x6>
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <DIO_enuReadPin+0x8>
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	8a 83       	std	Y+2, r24	; 0x02
     dd6:	7c 83       	std	Y+4, r23	; 0x04
     dd8:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStateLoc = EOK;
     dda:	19 82       	std	Y+1, r1	; 0x01
	
	if (pu8PinValueCpy != NULL_PTR)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	09 f4       	brne	.+2      	; 0xde6 <DIO_enuReadPin+0x1e>
     de4:	6e c0       	rjmp	.+220    	; 0xec2 <DIO_enuReadPin+0xfa>
	{
		//IDR
		if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	88 30       	cpi	r24, 0x08	; 8
     dea:	a0 f4       	brcc	.+40     	; 0xe14 <DIO_enuReadPin+0x4c>
		{
			*pu8PinValueCpy  = GET_BIT(IDRA , u8PinNumCpy);
     dec:	e9 e3       	ldi	r30, 0x39	; 57
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	88 2f       	mov	r24, r24
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	a9 01       	movw	r20, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_enuReadPin+0x3c>
     e00:	55 95       	asr	r21
     e02:	47 95       	ror	r20
     e04:	8a 95       	dec	r24
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_enuReadPin+0x38>
     e08:	ca 01       	movw	r24, r20
     e0a:	81 70       	andi	r24, 0x01	; 1
     e0c:	eb 81       	ldd	r30, Y+3	; 0x03
     e0e:	fc 81       	ldd	r31, Y+4	; 0x04
     e10:	80 83       	st	Z, r24
     e12:	59 c0       	rjmp	.+178    	; 0xec6 <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	88 30       	cpi	r24, 0x08	; 8
     e18:	c8 f0       	brcs	.+50     	; 0xe4c <DIO_enuReadPin+0x84>
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	80 31       	cpi	r24, 0x10	; 16
     e1e:	b0 f4       	brcc	.+44     	; 0xe4c <DIO_enuReadPin+0x84>
		{
			*pu8PinValueCpy  = GET_BIT(IDRB , u8PinNumCpy%8);		
     e20:	e6 e3       	ldi	r30, 0x36	; 54
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	88 2f       	mov	r24, r24
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	87 70       	andi	r24, 0x07	; 7
     e32:	90 70       	andi	r25, 0x00	; 0
     e34:	a9 01       	movw	r20, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_enuReadPin+0x74>
     e38:	55 95       	asr	r21
     e3a:	47 95       	ror	r20
     e3c:	8a 95       	dec	r24
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_enuReadPin+0x70>
     e40:	ca 01       	movw	r24, r20
     e42:	81 70       	andi	r24, 0x01	; 1
     e44:	eb 81       	ldd	r30, Y+3	; 0x03
     e46:	fc 81       	ldd	r31, Y+4	; 0x04
     e48:	80 83       	st	Z, r24
     e4a:	3d c0       	rjmp	.+122    	; 0xec6 <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	80 31       	cpi	r24, 0x10	; 16
     e50:	c8 f0       	brcs	.+50     	; 0xe84 <DIO_enuReadPin+0xbc>
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	88 31       	cpi	r24, 0x18	; 24
     e56:	b0 f4       	brcc	.+44     	; 0xe84 <DIO_enuReadPin+0xbc>
		{
			*pu8PinValueCpy  = GET_BIT(IDRC , u8PinNumCpy%8);
     e58:	e3 e3       	ldi	r30, 0x33	; 51
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	88 2f       	mov	r24, r24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	87 70       	andi	r24, 0x07	; 7
     e6a:	90 70       	andi	r25, 0x00	; 0
     e6c:	a9 01       	movw	r20, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <DIO_enuReadPin+0xac>
     e70:	55 95       	asr	r21
     e72:	47 95       	ror	r20
     e74:	8a 95       	dec	r24
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <DIO_enuReadPin+0xa8>
     e78:	ca 01       	movw	r24, r20
     e7a:	81 70       	andi	r24, 0x01	; 1
     e7c:	eb 81       	ldd	r30, Y+3	; 0x03
     e7e:	fc 81       	ldd	r31, Y+4	; 0x04
     e80:	80 83       	st	Z, r24
     e82:	21 c0       	rjmp	.+66     	; 0xec6 <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	88 31       	cpi	r24, 0x18	; 24
     e88:	c8 f0       	brcs	.+50     	; 0xebc <DIO_enuReadPin+0xf4>
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	80 32       	cpi	r24, 0x20	; 32
     e8e:	b0 f4       	brcc	.+44     	; 0xebc <DIO_enuReadPin+0xf4>
		{
			*pu8PinValueCpy  = GET_BIT(IDRD , u8PinNumCpy%8);
     e90:	e0 e3       	ldi	r30, 0x30	; 48
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	87 70       	andi	r24, 0x07	; 7
     ea2:	90 70       	andi	r25, 0x00	; 0
     ea4:	a9 01       	movw	r20, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_enuReadPin+0xe4>
     ea8:	55 95       	asr	r21
     eaa:	47 95       	ror	r20
     eac:	8a 95       	dec	r24
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_enuReadPin+0xe0>
     eb0:	ca 01       	movw	r24, r20
     eb2:	81 70       	andi	r24, 0x01	; 1
     eb4:	eb 81       	ldd	r30, Y+3	; 0x03
     eb6:	fc 81       	ldd	r31, Y+4	; 0x04
     eb8:	80 83       	st	Z, r24
     eba:	05 c0       	rjmp	.+10     	; 0xec6 <DIO_enuReadPin+0xfe>
		}
		else
		{
			enuReturnStateLoc = PARAM_OUT_RANGE ;
     ebc:	82 e0       	ldi	r24, 0x02	; 2
     ebe:	89 83       	std	Y+1, r24	; 0x01
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <DIO_enuReadPin+0xfe>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_NULL_PTR ;
     ec2:	83 e0       	ldi	r24, 0x03	; 3
     ec4:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuReturnStateLoc ;
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
	
}          
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <DIO_enuStatePullup>:

tenuErrorStatus DIO_enuStatePullup(uint8 u8PinNumCpy, uint8 u8StateCpy)        
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	00 d0       	rcall	.+0      	; 0xedc <DIO_enuStatePullup+0x6>
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	89 83       	std	Y+1, r24	; 0x01
     ee2:	6a 83       	std	Y+2, r22	; 0x02
   return DIO_enuWritePin(u8PinNumCpy,u8StateCpy);	
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	6a 81       	ldd	r22, Y+2	; 0x02
     ee8:	0e 94 b2 05 	call	0xb64	; 0xb64 <DIO_enuWritePin>
}
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <DIO_enuWriteGroup>:

tenuErrorStatus DIO_enuWriteGroup(uint8 *pau8PinNumCpy,uint8 * pau8PinValueCpy , uint8 u8SizeCpy)
{
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	28 97       	sbiw	r28, 0x08	; 8
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	9c 83       	std	Y+4, r25	; 0x04
     f0c:	8b 83       	std	Y+3, r24	; 0x03
     f0e:	7e 83       	std	Y+6, r23	; 0x06
     f10:	6d 83       	std	Y+5, r22	; 0x05
     f12:	4f 83       	std	Y+7, r20	; 0x07
	tenuErrorStatus enuReturnStateLoc = EOK ;
     f14:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ; u8CntrLoc< u8SizeCpy ; u8CntrLoc++)
     f16:	19 82       	std	Y+1, r1	; 0x01
     f18:	1d c0       	rjmp	.+58     	; 0xf54 <DIO_enuWriteGroup+0x5e>
	{
		enuReturnStateLoc = DIO_enuWritePin(pau8PinNumCpy[u8CntrLoc],pau8PinValueCpy[u8CntrLoc]);
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	9c 81       	ldd	r25, Y+4	; 0x04
     f24:	fc 01       	movw	r30, r24
     f26:	e2 0f       	add	r30, r18
     f28:	f3 1f       	adc	r31, r19
     f2a:	40 81       	ld	r20, Z
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	8d 81       	ldd	r24, Y+5	; 0x05
     f34:	9e 81       	ldd	r25, Y+6	; 0x06
     f36:	fc 01       	movw	r30, r24
     f38:	e2 0f       	add	r30, r18
     f3a:	f3 1f       	adc	r31, r19
     f3c:	90 81       	ld	r25, Z
     f3e:	84 2f       	mov	r24, r20
     f40:	69 2f       	mov	r22, r25
     f42:	0e 94 b2 05 	call	0xb64	; 0xb64 <DIO_enuWritePin>
     f46:	8a 83       	std	Y+2, r24	; 0x02
		if (enuReturnStateLoc !=EOK)
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	88 23       	and	r24, r24
     f4c:	39 f4       	brne	.+14     	; 0xf5c <DIO_enuWriteGroup+0x66>

tenuErrorStatus DIO_enuWriteGroup(uint8 *pau8PinNumCpy,uint8 * pau8PinValueCpy , uint8 u8SizeCpy)
{
	tenuErrorStatus enuReturnStateLoc = EOK ;
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ; u8CntrLoc< u8SizeCpy ; u8CntrLoc++)
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	8f 5f       	subi	r24, 0xFF	; 255
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	99 81       	ldd	r25, Y+1	; 0x01
     f56:	8f 81       	ldd	r24, Y+7	; 0x07
     f58:	98 17       	cp	r25, r24
     f5a:	f8 f2       	brcs	.-66     	; 0xf1a <DIO_enuWriteGroup+0x24>
		if (enuReturnStateLoc !=EOK)
		{
			break;
		}
	}
}
     f5c:	28 96       	adiw	r28, 0x08	; 8
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <KEYPAD_voidInit>:
#include "DIO.h"
#include "KEYPAD.h"
#include "KEYPAD_cfg.h"
#include "KEYPAD_priv.h"
void KEYPAD_voidInit(void)
{
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	00 d0       	rcall	.+0      	; 0xf74 <KEYPAD_voidInit+0x6>
     f74:	0f 92       	push	r0
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
	uint8 u8CntrLoc;
	uint8 u8InputCntrLoc ;
	uint8 u8OutputCntrLoc ;
	//go through all keypads
	/* Loop Through all keypads*/
	for(u8CntrLoc = 0 ; u8CntrLoc < MAX_KEYPAD_NUM ; u8CntrLoc++)
     f7a:	1b 82       	std	Y+3, r1	; 0x03
     f7c:	65 c0       	rjmp	.+202    	; 0x1048 <KEYPAD_voidInit+0xda>
	{
		// put  input pins pulllup res
		/* all inputs activate pull up resistor     */
		for (u8InputCntrLoc = 0 ; u8InputCntrLoc < KEYPAD_astrKeyPadConfigSet[u8CntrLoc].u8InputPinsNum; u8InputCntrLoc++)
     f7e:	1a 82       	std	Y+2, r1	; 0x02
     f80:	1c c0       	rjmp	.+56     	; 0xfba <KEYPAD_voidInit+0x4c>
		{
			DIO_enuStatePullup(KEYPAD_astrKeyPadConfigSet[u8CntrLoc].au8InputPins[u8InputCntrLoc],DIO_ACTIVATE);
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	48 2f       	mov	r20, r24
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	c9 01       	movw	r24, r18
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	9c 01       	movw	r18, r24
     f96:	22 0f       	add	r18, r18
     f98:	33 1f       	adc	r19, r19
     f9a:	22 0f       	add	r18, r18
     f9c:	33 1f       	adc	r19, r19
     f9e:	82 0f       	add	r24, r18
     fa0:	93 1f       	adc	r25, r19
     fa2:	84 0f       	add	r24, r20
     fa4:	95 1f       	adc	r25, r21
     fa6:	fc 01       	movw	r30, r24
     fa8:	e8 59       	subi	r30, 0x98	; 152
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	80 81       	ld	r24, Z
     fae:	61 e0       	ldi	r22, 0x01	; 1
     fb0:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_enuStatePullup>
	/* Loop Through all keypads*/
	for(u8CntrLoc = 0 ; u8CntrLoc < MAX_KEYPAD_NUM ; u8CntrLoc++)
	{
		// put  input pins pulllup res
		/* all inputs activate pull up resistor     */
		for (u8InputCntrLoc = 0 ; u8InputCntrLoc < KEYPAD_astrKeyPadConfigSet[u8CntrLoc].u8InputPinsNum; u8InputCntrLoc++)
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	8f 5f       	subi	r24, 0xFF	; 255
     fb8:	8a 83       	std	Y+2, r24	; 0x02
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	88 2f       	mov	r24, r24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	9c 01       	movw	r18, r24
     fc6:	22 0f       	add	r18, r18
     fc8:	33 1f       	adc	r19, r19
     fca:	22 0f       	add	r18, r18
     fcc:	33 1f       	adc	r19, r19
     fce:	82 0f       	add	r24, r18
     fd0:	93 1f       	adc	r25, r19
     fd2:	fc 01       	movw	r30, r24
     fd4:	e0 59       	subi	r30, 0x90	; 144
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	90 81       	ld	r25, Z
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	89 17       	cp	r24, r25
     fde:	88 f2       	brcs	.-94     	; 0xf82 <KEYPAD_voidInit+0x14>
			DIO_enuStatePullup(KEYPAD_astrKeyPadConfigSet[u8CntrLoc].au8InputPins[u8InputCntrLoc],DIO_ACTIVATE);
		}
		/* all output seq ones no switch under test */
			//put high on all o/p pins

		for (u8OutputCntrLoc = 0 ; u8OutputCntrLoc < KEYPAD_astrKeyPadConfigSet[u8CntrLoc].u8OutputPindNum; u8OutputCntrLoc++)
     fe0:	19 82       	std	Y+1, r1	; 0x01
     fe2:	1c c0       	rjmp	.+56     	; 0x101c <KEYPAD_voidInit+0xae>
		{
			DIO_enuWritePin(KEYPAD_astrKeyPadConfigSet[u8CntrLoc].au8OutputPins[u8OutputCntrLoc], DIO_HIGH);
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	48 2f       	mov	r20, r24
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	c9 01       	movw	r24, r18
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	9c 01       	movw	r18, r24
     ff8:	22 0f       	add	r18, r18
     ffa:	33 1f       	adc	r19, r19
     ffc:	22 0f       	add	r18, r18
     ffe:	33 1f       	adc	r19, r19
    1000:	82 0f       	add	r24, r18
    1002:	93 1f       	adc	r25, r19
    1004:	84 0f       	add	r24, r20
    1006:	95 1f       	adc	r25, r21
    1008:	fc 01       	movw	r30, r24
    100a:	e4 59       	subi	r30, 0x94	; 148
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	80 81       	ld	r24, Z
    1010:	61 e0       	ldi	r22, 0x01	; 1
    1012:	0e 94 b2 05 	call	0xb64	; 0xb64 <DIO_enuWritePin>
			DIO_enuStatePullup(KEYPAD_astrKeyPadConfigSet[u8CntrLoc].au8InputPins[u8InputCntrLoc],DIO_ACTIVATE);
		}
		/* all output seq ones no switch under test */
			//put high on all o/p pins

		for (u8OutputCntrLoc = 0 ; u8OutputCntrLoc < KEYPAD_astrKeyPadConfigSet[u8CntrLoc].u8OutputPindNum; u8OutputCntrLoc++)
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	8f 5f       	subi	r24, 0xFF	; 255
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	88 2f       	mov	r24, r24
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	9c 01       	movw	r18, r24
    1028:	22 0f       	add	r18, r18
    102a:	33 1f       	adc	r19, r19
    102c:	22 0f       	add	r18, r18
    102e:	33 1f       	adc	r19, r19
    1030:	82 0f       	add	r24, r18
    1032:	93 1f       	adc	r25, r19
    1034:	fc 01       	movw	r30, r24
    1036:	ef 58       	subi	r30, 0x8F	; 143
    1038:	ff 4f       	sbci	r31, 0xFF	; 255
    103a:	90 81       	ld	r25, Z
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	89 17       	cp	r24, r25
    1040:	88 f2       	brcs	.-94     	; 0xfe4 <KEYPAD_voidInit+0x76>
	uint8 u8CntrLoc;
	uint8 u8InputCntrLoc ;
	uint8 u8OutputCntrLoc ;
	//go through all keypads
	/* Loop Through all keypads*/
	for(u8CntrLoc = 0 ; u8CntrLoc < MAX_KEYPAD_NUM ; u8CntrLoc++)
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	8f 5f       	subi	r24, 0xFF	; 255
    1046:	8b 83       	std	Y+3, r24	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	88 23       	and	r24, r24
    104c:	09 f4       	brne	.+2      	; 0x1050 <KEYPAD_voidInit+0xe2>
    104e:	97 cf       	rjmp	.-210    	; 0xf7e <KEYPAD_voidInit+0x10>
			DIO_enuWritePin(KEYPAD_astrKeyPadConfigSet[u8CntrLoc].au8OutputPins[u8OutputCntrLoc], DIO_HIGH);
		}

	}

}
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <KEYPAD_u8GetPressedKey>:
uint8 KEYPAD_u8GetPressedKey(uint8 u8KeyPadIdxCpy)

{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	63 97       	sbiw	r28, 0x13	; 19
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	8b 8b       	std	Y+19, r24	; 0x13
	uint8 u8SeqCntrLoc;
	//seq count is outnums
	//var to put the read value of input in
	uint16 u16InputReadignLoc;
	//var to put the check reading in it
	uint8 u8ReturnKeyLoc =0xFF;
    1072:	8f ef       	ldi	r24, 0xFF	; 255
    1074:	8f 87       	std	Y+15, r24	; 0x0f
	//loop to know seq counter
	for(u8SeqCntrLoc = 0 ; u8SeqCntrLoc < KEYPAD_astrKeyPadConfigSet[u8KeyPadIdxCpy].u8OutputPindNum ;u8SeqCntrLoc++)
    1076:	1a 8a       	std	Y+18, r1	; 0x12
    1078:	89 c0       	rjmp	.+274    	; 0x118c <KEYPAD_u8GetPressedKey+0x130>
	{
	//to make it more generaic we will create fns for write seq , read inputs and check reading
	/* write seq u8seqCntrLoc  */
	voidWriteSeq(u8KeyPadIdxCpy ,u8SeqCntrLoc);
    107a:	8b 89       	ldd	r24, Y+19	; 0x13
    107c:	6a 89       	ldd	r22, Y+18	; 0x12
    107e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <voidWriteSeq>
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	a8 e4       	ldi	r26, 0x48	; 72
    1088:	b2 e4       	ldi	r27, 0x42	; 66
    108a:	8b 87       	std	Y+11, r24	; 0x0b
    108c:	9c 87       	std	Y+12, r25	; 0x0c
    108e:	ad 87       	std	Y+13, r26	; 0x0d
    1090:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1092:	6b 85       	ldd	r22, Y+11	; 0x0b
    1094:	7c 85       	ldd	r23, Y+12	; 0x0c
    1096:	8d 85       	ldd	r24, Y+13	; 0x0d
    1098:	9e 85       	ldd	r25, Y+14	; 0x0e
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	4a ef       	ldi	r20, 0xFA	; 250
    10a0:	54 e4       	ldi	r21, 0x44	; 68
    10a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	8f 83       	std	Y+7, r24	; 0x07
    10ac:	98 87       	std	Y+8, r25	; 0x08
    10ae:	a9 87       	std	Y+9, r26	; 0x09
    10b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10b2:	6f 81       	ldd	r22, Y+7	; 0x07
    10b4:	78 85       	ldd	r23, Y+8	; 0x08
    10b6:	89 85       	ldd	r24, Y+9	; 0x09
    10b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	40 e8       	ldi	r20, 0x80	; 128
    10c0:	5f e3       	ldi	r21, 0x3F	; 63
    10c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10c6:	88 23       	and	r24, r24
    10c8:	2c f4       	brge	.+10     	; 0x10d4 <KEYPAD_u8GetPressedKey+0x78>
		__ticks = 1;
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	9e 83       	std	Y+6, r25	; 0x06
    10d0:	8d 83       	std	Y+5, r24	; 0x05
    10d2:	3f c0       	rjmp	.+126    	; 0x1152 <KEYPAD_u8GetPressedKey+0xf6>
	else if (__tmp > 65535)
    10d4:	6f 81       	ldd	r22, Y+7	; 0x07
    10d6:	78 85       	ldd	r23, Y+8	; 0x08
    10d8:	89 85       	ldd	r24, Y+9	; 0x09
    10da:	9a 85       	ldd	r25, Y+10	; 0x0a
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	3f ef       	ldi	r19, 0xFF	; 255
    10e0:	4f e7       	ldi	r20, 0x7F	; 127
    10e2:	57 e4       	ldi	r21, 0x47	; 71
    10e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    10e8:	18 16       	cp	r1, r24
    10ea:	4c f5       	brge	.+82     	; 0x113e <KEYPAD_u8GetPressedKey+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	40 e2       	ldi	r20, 0x20	; 32
    10fa:	51 e4       	ldi	r21, 0x41	; 65
    10fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	bc 01       	movw	r22, r24
    1106:	cd 01       	movw	r24, r26
    1108:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	9e 83       	std	Y+6, r25	; 0x06
    1112:	8d 83       	std	Y+5, r24	; 0x05
    1114:	0f c0       	rjmp	.+30     	; 0x1134 <KEYPAD_u8GetPressedKey+0xd8>
    1116:	88 ec       	ldi	r24, 0xC8	; 200
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	9c 83       	std	Y+4, r25	; 0x04
    111c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	9c 81       	ldd	r25, Y+4	; 0x04
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	f1 f7       	brne	.-4      	; 0x1122 <KEYPAD_u8GetPressedKey+0xc6>
    1126:	9c 83       	std	Y+4, r25	; 0x04
    1128:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    112a:	8d 81       	ldd	r24, Y+5	; 0x05
    112c:	9e 81       	ldd	r25, Y+6	; 0x06
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	9e 83       	std	Y+6, r25	; 0x06
    1132:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1134:	8d 81       	ldd	r24, Y+5	; 0x05
    1136:	9e 81       	ldd	r25, Y+6	; 0x06
    1138:	00 97       	sbiw	r24, 0x00	; 0
    113a:	69 f7       	brne	.-38     	; 0x1116 <KEYPAD_u8GetPressedKey+0xba>
    113c:	14 c0       	rjmp	.+40     	; 0x1166 <KEYPAD_u8GetPressedKey+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    113e:	6f 81       	ldd	r22, Y+7	; 0x07
    1140:	78 85       	ldd	r23, Y+8	; 0x08
    1142:	89 85       	ldd	r24, Y+9	; 0x09
    1144:	9a 85       	ldd	r25, Y+10	; 0x0a
    1146:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	9e 83       	std	Y+6, r25	; 0x06
    1150:	8d 83       	std	Y+5, r24	; 0x05
    1152:	8d 81       	ldd	r24, Y+5	; 0x05
    1154:	9e 81       	ldd	r25, Y+6	; 0x06
    1156:	9a 83       	std	Y+2, r25	; 0x02
    1158:	89 83       	std	Y+1, r24	; 0x01
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	9a 81       	ldd	r25, Y+2	; 0x02
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	f1 f7       	brne	.-4      	; 0x115e <KEYPAD_u8GetPressedKey+0x102>
    1162:	9a 83       	std	Y+2, r25	; 0x02
    1164:	89 83       	std	Y+1, r24	; 0x01
	/* delay */
	_delay_ms(50);
	//read inputs
	u16InputReadignLoc = u16ReadInputs(u8KeyPadIdxCpy);
    1166:	8b 89       	ldd	r24, Y+19	; 0x13
    1168:	0e 94 42 09 	call	0x1284	; 0x1284 <u16ReadInputs>
    116c:	99 8b       	std	Y+17, r25	; 0x11
    116e:	88 8b       	std	Y+16, r24	; 0x10
	//check break; FF->nothing is pressed
	u8ReturnKeyLoc = u8CheckReading(u8KeyPadIdxCpy , u8SeqCntrLoc , u16InputReadignLoc);
    1170:	28 89       	ldd	r18, Y+16	; 0x10
    1172:	39 89       	ldd	r19, Y+17	; 0x11
    1174:	8b 89       	ldd	r24, Y+19	; 0x13
    1176:	6a 89       	ldd	r22, Y+18	; 0x12
    1178:	a9 01       	movw	r20, r18
    117a:	0e 94 a5 09 	call	0x134a	; 0x134a <u8CheckReading>
    117e:	8f 87       	std	Y+15, r24	; 0x0f
	if(u8ReturnKeyLoc != 0xFF)
    1180:	8f 85       	ldd	r24, Y+15	; 0x0f
    1182:	8f 3f       	cpi	r24, 0xFF	; 255
    1184:	b9 f4       	brne	.+46     	; 0x11b4 <KEYPAD_u8GetPressedKey+0x158>
	//var to put the read value of input in
	uint16 u16InputReadignLoc;
	//var to put the check reading in it
	uint8 u8ReturnKeyLoc =0xFF;
	//loop to know seq counter
	for(u8SeqCntrLoc = 0 ; u8SeqCntrLoc < KEYPAD_astrKeyPadConfigSet[u8KeyPadIdxCpy].u8OutputPindNum ;u8SeqCntrLoc++)
    1186:	8a 89       	ldd	r24, Y+18	; 0x12
    1188:	8f 5f       	subi	r24, 0xFF	; 255
    118a:	8a 8b       	std	Y+18, r24	; 0x12
    118c:	8b 89       	ldd	r24, Y+19	; 0x13
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	9c 01       	movw	r18, r24
    1198:	22 0f       	add	r18, r18
    119a:	33 1f       	adc	r19, r19
    119c:	22 0f       	add	r18, r18
    119e:	33 1f       	adc	r19, r19
    11a0:	82 0f       	add	r24, r18
    11a2:	93 1f       	adc	r25, r19
    11a4:	fc 01       	movw	r30, r24
    11a6:	ef 58       	subi	r30, 0x8F	; 143
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	90 81       	ld	r25, Z
    11ac:	8a 89       	ldd	r24, Y+18	; 0x12
    11ae:	89 17       	cp	r24, r25
    11b0:	08 f4       	brcc	.+2      	; 0x11b4 <KEYPAD_u8GetPressedKey+0x158>
    11b2:	63 cf       	rjmp	.-314    	; 0x107a <KEYPAD_u8GetPressedKey+0x1e>
		break;
	}


	}
	return u8ReturnKeyLoc;
    11b4:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    11b6:	63 96       	adiw	r28, 0x13	; 19
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	de bf       	out	0x3e, r29	; 62
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	cd bf       	out	0x3d, r28	; 61
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <voidWriteSeq>:
//fn to write seq
static void voidWriteSeq(uint8 u8KeyPadIdxCpy , uint8 u8SeqIdxCpy)
{
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <voidWriteSeq+0x6>
    11ce:	0f 92       	push	r0
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	8a 83       	std	Y+2, r24	; 0x02
    11d6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8CntrLoc  ;
	//we want to put on all output pins high -> 1 except the one that is cntr == seq id put it to low
		for (u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_astrKeyPadConfigSet[u8KeyPadIdxCpy].u8OutputPindNum; u8CntrLoc++)
    11d8:	19 82       	std	Y+1, r1	; 0x01
    11da:	3a c0       	rjmp	.+116    	; 0x1250 <voidWriteSeq+0x88>
		{
			if (u8CntrLoc == u8SeqIdxCpy)
    11dc:	99 81       	ldd	r25, Y+1	; 0x01
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	98 17       	cp	r25, r24
    11e2:	d1 f4       	brne	.+52     	; 0x1218 <voidWriteSeq+0x50>
			{
				DIO_enuWritePin(KEYPAD_astrKeyPadConfigSet[u8KeyPadIdxCpy].au8OutputPins[u8CntrLoc], DIO_LOW);
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	48 2f       	mov	r20, r24
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	c9 01       	movw	r24, r18
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	9c 01       	movw	r18, r24
    11f8:	22 0f       	add	r18, r18
    11fa:	33 1f       	adc	r19, r19
    11fc:	22 0f       	add	r18, r18
    11fe:	33 1f       	adc	r19, r19
    1200:	82 0f       	add	r24, r18
    1202:	93 1f       	adc	r25, r19
    1204:	84 0f       	add	r24, r20
    1206:	95 1f       	adc	r25, r21
    1208:	fc 01       	movw	r30, r24
    120a:	e4 59       	subi	r30, 0x94	; 148
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	80 81       	ld	r24, Z
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	0e 94 b2 05 	call	0xb64	; 0xb64 <DIO_enuWritePin>
    1216:	19 c0       	rjmp	.+50     	; 0x124a <voidWriteSeq+0x82>
			}
			else
			{
	    		DIO_enuWritePin(KEYPAD_astrKeyPadConfigSet[u8KeyPadIdxCpy].au8OutputPins[u8CntrLoc], DIO_HIGH);
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	48 2f       	mov	r20, r24
    1222:	50 e0       	ldi	r21, 0x00	; 0
    1224:	c9 01       	movw	r24, r18
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	9c 01       	movw	r18, r24
    122c:	22 0f       	add	r18, r18
    122e:	33 1f       	adc	r19, r19
    1230:	22 0f       	add	r18, r18
    1232:	33 1f       	adc	r19, r19
    1234:	82 0f       	add	r24, r18
    1236:	93 1f       	adc	r25, r19
    1238:	84 0f       	add	r24, r20
    123a:	95 1f       	adc	r25, r21
    123c:	fc 01       	movw	r30, r24
    123e:	e4 59       	subi	r30, 0x94	; 148
    1240:	ff 4f       	sbci	r31, 0xFF	; 255
    1242:	80 81       	ld	r24, Z
    1244:	61 e0       	ldi	r22, 0x01	; 1
    1246:	0e 94 b2 05 	call	0xb64	; 0xb64 <DIO_enuWritePin>
//fn to write seq
static void voidWriteSeq(uint8 u8KeyPadIdxCpy , uint8 u8SeqIdxCpy)
{
	uint8 u8CntrLoc  ;
	//we want to put on all output pins high -> 1 except the one that is cntr == seq id put it to low
		for (u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_astrKeyPadConfigSet[u8KeyPadIdxCpy].u8OutputPindNum; u8CntrLoc++)
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	8f 5f       	subi	r24, 0xFF	; 255
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	88 2f       	mov	r24, r24
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	9c 01       	movw	r18, r24
    125c:	22 0f       	add	r18, r18
    125e:	33 1f       	adc	r19, r19
    1260:	22 0f       	add	r18, r18
    1262:	33 1f       	adc	r19, r19
    1264:	82 0f       	add	r24, r18
    1266:	93 1f       	adc	r25, r19
    1268:	fc 01       	movw	r30, r24
    126a:	ef 58       	subi	r30, 0x8F	; 143
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	90 81       	ld	r25, Z
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	89 17       	cp	r24, r25
    1274:	08 f4       	brcc	.+2      	; 0x1278 <voidWriteSeq+0xb0>
    1276:	b2 cf       	rjmp	.-156    	; 0x11dc <voidWriteSeq+0x14>
	    		DIO_enuWritePin(KEYPAD_astrKeyPadConfigSet[u8KeyPadIdxCpy].au8OutputPins[u8CntrLoc], DIO_HIGH);
			}

		}

}
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <u16ReadInputs>:
//fn to read inouts from your keypad
static uint16 u16ReadInputs(uint8 u8KeyPadIdxCpy)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	00 d0       	rcall	.+0      	; 0x128a <u16ReadInputs+0x6>
    128a:	00 d0       	rcall	.+0      	; 0x128c <u16ReadInputs+0x8>
    128c:	0f 92       	push	r0
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	8d 83       	std	Y+5, r24	; 0x05
	//loop thriugh inputs and read each bit
	uint16 u16ReturnReadingLoc = 0xFFFF ;
    1294:	8f ef       	ldi	r24, 0xFF	; 255
    1296:	9f ef       	ldi	r25, 0xFF	; 255
    1298:	9b 83       	std	Y+3, r25	; 0x03
    129a:	8a 83       	std	Y+2, r24	; 0x02
    uint8  u8InputCntrLoc             ;
	uint8  u8TempReadingLoc  =     0  ;
    129c:	1c 82       	std	Y+4, r1	; 0x04
	for (u8InputCntrLoc = 0 ; u8InputCntrLoc < KEYPAD_astrKeyPadConfigSet[u8KeyPadIdxCpy].u8InputPinsNum; u8InputCntrLoc++)
    129e:	19 82       	std	Y+1, r1	; 0x01
    12a0:	36 c0       	rjmp	.+108    	; 0x130e <u16ReadInputs+0x8a>
	{
	  DIO_enuReadPin(KEYPAD_astrKeyPadConfigSet[u8KeyPadIdxCpy].au8InputPins[u8InputCntrLoc],&u8TempReadingLoc);
    12a2:	8d 81       	ldd	r24, Y+5	; 0x05
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	48 2f       	mov	r20, r24
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	c9 01       	movw	r24, r18
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	9c 01       	movw	r18, r24
    12b6:	22 0f       	add	r18, r18
    12b8:	33 1f       	adc	r19, r19
    12ba:	22 0f       	add	r18, r18
    12bc:	33 1f       	adc	r19, r19
    12be:	82 0f       	add	r24, r18
    12c0:	93 1f       	adc	r25, r19
    12c2:	84 0f       	add	r24, r20
    12c4:	95 1f       	adc	r25, r21
    12c6:	fc 01       	movw	r30, r24
    12c8:	e8 59       	subi	r30, 0x98	; 152
    12ca:	ff 4f       	sbci	r31, 0xFF	; 255
    12cc:	80 81       	ld	r24, Z
    12ce:	9e 01       	movw	r18, r28
    12d0:	2c 5f       	subi	r18, 0xFC	; 252
    12d2:	3f 4f       	sbci	r19, 0xFF	; 255
    12d4:	b9 01       	movw	r22, r18
    12d6:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <DIO_enuReadPin>
	  //if bit is low then the switch is pressed
	  if (u8TempReadingLoc == 0)
    12da:	8c 81       	ldd	r24, Y+4	; 0x04
    12dc:	88 23       	and	r24, r24
    12de:	a1 f4       	brne	.+40     	; 0x1308 <u16ReadInputs+0x84>
	  {
		 //we need the bit in the reading and break after that
		 CLR_BIT(u16ReturnReadingLoc , u8InputCntrLoc );
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <u16ReadInputs+0x6c>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	2a 95       	dec	r18
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <u16ReadInputs+0x68>
    12f4:	80 95       	com	r24
    12f6:	90 95       	com	r25
    12f8:	9c 01       	movw	r18, r24
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	9b 81       	ldd	r25, Y+3	; 0x03
    12fe:	82 23       	and	r24, r18
    1300:	93 23       	and	r25, r19
    1302:	9b 83       	std	Y+3, r25	; 0x03
    1304:	8a 83       	std	Y+2, r24	; 0x02
    1306:	17 c0       	rjmp	.+46     	; 0x1336 <u16ReadInputs+0xb2>
{
	//loop thriugh inputs and read each bit
	uint16 u16ReturnReadingLoc = 0xFFFF ;
    uint8  u8InputCntrLoc             ;
	uint8  u8TempReadingLoc  =     0  ;
	for (u8InputCntrLoc = 0 ; u8InputCntrLoc < KEYPAD_astrKeyPadConfigSet[u8KeyPadIdxCpy].u8InputPinsNum; u8InputCntrLoc++)
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	8f 5f       	subi	r24, 0xFF	; 255
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	9c 01       	movw	r18, r24
    131a:	22 0f       	add	r18, r18
    131c:	33 1f       	adc	r19, r19
    131e:	22 0f       	add	r18, r18
    1320:	33 1f       	adc	r19, r19
    1322:	82 0f       	add	r24, r18
    1324:	93 1f       	adc	r25, r19
    1326:	fc 01       	movw	r30, r24
    1328:	e0 59       	subi	r30, 0x90	; 144
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	90 81       	ld	r25, Z
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	89 17       	cp	r24, r25
    1332:	08 f4       	brcc	.+2      	; 0x1336 <u16ReadInputs+0xb2>
    1334:	b6 cf       	rjmp	.-148    	; 0x12a2 <u16ReadInputs+0x1e>
		 CLR_BIT(u16ReturnReadingLoc , u8InputCntrLoc );
		 break ;
	  }

	}
	return u16ReturnReadingLoc ;
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	9b 81       	ldd	r25, Y+3	; 0x03


}
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <u8CheckReading>:
//fn to check the intersection between the seq and the readinginput and get which switch is pressed
static uint8 u8CheckReading(uint8 u8KeyPadIdxCpy ,uint8 u8SeqIdxCpy , uint16 u16InputReadingCpy)
{
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	27 97       	sbiw	r28, 0x07	; 7
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	de bf       	out	0x3e, r29	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	cd bf       	out	0x3d, r28	; 61
    135e:	8c 83       	std	Y+4, r24	; 0x04
    1360:	6d 83       	std	Y+5, r22	; 0x05
    1362:	5f 83       	std	Y+7, r21	; 0x07
    1364:	4e 83       	std	Y+6, r20	; 0x06
	//mapping between i and o
	uint8 u8ReturnKeyLoc;
	uint8 u8InputCntrLoc ;
	uint8 u8InputBitLoc  ;
	//checking if no key is pressed
	if(u16InputReadingCpy == 0xFFFF)
    1366:	8e 81       	ldd	r24, Y+6	; 0x06
    1368:	9f 81       	ldd	r25, Y+7	; 0x07
    136a:	2f ef       	ldi	r18, 0xFF	; 255
    136c:	8f 3f       	cpi	r24, 0xFF	; 255
    136e:	92 07       	cpc	r25, r18
    1370:	19 f4       	brne	.+6      	; 0x1378 <u8CheckReading+0x2e>
	{
		u8ReturnKeyLoc = 0xFF;
    1372:	8f ef       	ldi	r24, 0xFF	; 255
    1374:	8b 83       	std	Y+3, r24	; 0x03
    1376:	45 c0       	rjmp	.+138    	; 0x1402 <u8CheckReading+0xb8>
	}
	else
	{
		//loop through the reading to find which bit is low
		//and then we say the bit with num # instersection with seq # gives us res
		for (u8InputCntrLoc = 0 ; u8InputCntrLoc < KEYPAD_astrKeyPadConfigSet[u8KeyPadIdxCpy].u8InputPinsNum; u8InputCntrLoc++)
    1378:	1a 82       	std	Y+2, r1	; 0x02
    137a:	2f c0       	rjmp	.+94     	; 0x13da <u8CheckReading+0x90>
		{
		   u8InputBitLoc =  GET_BIT(u16InputReadingCpy ,u8InputCntrLoc );
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	8e 81       	ldd	r24, Y+6	; 0x06
    1384:	9f 81       	ldd	r25, Y+7	; 0x07
    1386:	02 2e       	mov	r0, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <u8CheckReading+0x44>
    138a:	96 95       	lsr	r25
    138c:	87 95       	ror	r24
    138e:	0a 94       	dec	r0
    1390:	e2 f7       	brpl	.-8      	; 0x138a <u8CheckReading+0x40>
    1392:	81 70       	andi	r24, 0x01	; 1
    1394:	89 83       	std	Y+1, r24	; 0x01
		   if (u8InputBitLoc == 0)
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	88 23       	and	r24, r24
    139a:	e1 f4       	brne	.+56     	; 0x13d4 <u8CheckReading+0x8a>
		   {
			    // input  --> u8InputCntrLoc  output   --> u8SeqIdxCpy

			   u8ReturnKeyLoc = KEYPAD_au8Mapping[u8KeyPadIdxCpy][u8SeqIdxCpy][u8InputCntrLoc];
    139c:	8c 81       	ldd	r24, Y+4	; 0x04
    139e:	68 2f       	mov	r22, r24
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	8d 81       	ldd	r24, Y+5	; 0x05
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	48 2f       	mov	r20, r24
    13ac:	50 e0       	ldi	r21, 0x00	; 0
    13ae:	cb 01       	movw	r24, r22
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	82 0f       	add	r24, r18
    13ba:	93 1f       	adc	r25, r19
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	84 0f       	add	r24, r20
    13c6:	95 1f       	adc	r25, r21
    13c8:	fc 01       	movw	r30, r24
    13ca:	ee 58       	subi	r30, 0x8E	; 142
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	80 81       	ld	r24, Z
    13d0:	8b 83       	std	Y+3, r24	; 0x03
    13d2:	17 c0       	rjmp	.+46     	; 0x1402 <u8CheckReading+0xb8>
	}
	else
	{
		//loop through the reading to find which bit is low
		//and then we say the bit with num # instersection with seq # gives us res
		for (u8InputCntrLoc = 0 ; u8InputCntrLoc < KEYPAD_astrKeyPadConfigSet[u8KeyPadIdxCpy].u8InputPinsNum; u8InputCntrLoc++)
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	8f 5f       	subi	r24, 0xFF	; 255
    13d8:	8a 83       	std	Y+2, r24	; 0x02
    13da:	8c 81       	ldd	r24, Y+4	; 0x04
    13dc:	88 2f       	mov	r24, r24
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	9c 01       	movw	r18, r24
    13e6:	22 0f       	add	r18, r18
    13e8:	33 1f       	adc	r19, r19
    13ea:	22 0f       	add	r18, r18
    13ec:	33 1f       	adc	r19, r19
    13ee:	82 0f       	add	r24, r18
    13f0:	93 1f       	adc	r25, r19
    13f2:	fc 01       	movw	r30, r24
    13f4:	e0 59       	subi	r30, 0x90	; 144
    13f6:	ff 4f       	sbci	r31, 0xFF	; 255
    13f8:	90 81       	ld	r25, Z
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	89 17       	cp	r24, r25
    13fe:	08 f4       	brcc	.+2      	; 0x1402 <u8CheckReading+0xb8>
    1400:	bd cf       	rjmp	.-134    	; 0x137c <u8CheckReading+0x32>
				break ;
		   }

		}
	}
	return u8ReturnKeyLoc;
    1402:	8b 81       	ldd	r24, Y+3	; 0x03

}
    1404:	27 96       	adiw	r28, 0x07	; 7
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <LCD_voidInit>:
#include "LCD_cfg.h"
#include "LCD_priv.h"


void LCD_voidInit(void)
{
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	ce 58       	subi	r28, 0x8E	; 142
    1424:	d0 40       	sbci	r29, 0x00	; 0
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
	uint8 u8CntrLoc = 0 ;
    1430:	fe 01       	movw	r30, r28
    1432:	e2 57       	subi	r30, 0x72	; 114
    1434:	ff 4f       	sbci	r31, 0xFF	; 255
    1436:	10 82       	st	Z, r1
	uint8 u8CmdLoc  = 0 ;
    1438:	fe 01       	movw	r30, r28
    143a:	e3 57       	subi	r30, 0x73	; 115
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	10 82       	st	Z, r1
	for ( u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc ++)
    1440:	fe 01       	movw	r30, r28
    1442:	e2 57       	subi	r30, 0x72	; 114
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	10 82       	st	Z, r1
    1448:	0c 94 44 12 	jmp	0x2488	; 0x2488 <LCD_voidInit+0x1072>
	{
		if (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
    144c:	fe 01       	movw	r30, r28
    144e:	e2 57       	subi	r30, 0x72	; 114
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	80 81       	ld	r24, Z
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	c9 01       	movw	r24, r18
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	82 0f       	add	r24, r18
    1460:	93 1f       	adc	r25, r19
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	fc 01       	movw	r30, r24
    146c:	ee 57       	subi	r30, 0x7E	; 126
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	80 81       	ld	r24, Z
    1472:	81 70       	andi	r24, 0x01	; 1
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	09 f0       	breq	.+2      	; 0x147a <LCD_voidInit+0x64>
    1478:	75 c4       	rjmp	.+2282   	; 0x1d64 <LCD_voidInit+0x94e>
    147a:	fe 01       	movw	r30, r28
    147c:	e7 57       	subi	r30, 0x77	; 119
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	a0 ef       	ldi	r26, 0xF0	; 240
    1486:	b1 e4       	ldi	r27, 0x41	; 65
    1488:	80 83       	st	Z, r24
    148a:	91 83       	std	Z+1, r25	; 0x01
    148c:	a2 83       	std	Z+2, r26	; 0x02
    148e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1490:	8e 01       	movw	r16, r28
    1492:	0b 57       	subi	r16, 0x7B	; 123
    1494:	1f 4f       	sbci	r17, 0xFF	; 255
    1496:	fe 01       	movw	r30, r28
    1498:	e7 57       	subi	r30, 0x77	; 119
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	60 81       	ld	r22, Z
    149e:	71 81       	ldd	r23, Z+1	; 0x01
    14a0:	82 81       	ldd	r24, Z+2	; 0x02
    14a2:	93 81       	ldd	r25, Z+3	; 0x03
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	4a ef       	ldi	r20, 0xFA	; 250
    14aa:	54 e4       	ldi	r21, 0x44	; 68
    14ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	f8 01       	movw	r30, r16
    14b6:	80 83       	st	Z, r24
    14b8:	91 83       	std	Z+1, r25	; 0x01
    14ba:	a2 83       	std	Z+2, r26	; 0x02
    14bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14be:	fe 01       	movw	r30, r28
    14c0:	eb 57       	subi	r30, 0x7B	; 123
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	60 81       	ld	r22, Z
    14c6:	71 81       	ldd	r23, Z+1	; 0x01
    14c8:	82 81       	ldd	r24, Z+2	; 0x02
    14ca:	93 81       	ldd	r25, Z+3	; 0x03
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e8       	ldi	r20, 0x80	; 128
    14d2:	5f e3       	ldi	r21, 0x3F	; 63
    14d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14d8:	88 23       	and	r24, r24
    14da:	44 f4       	brge	.+16     	; 0x14ec <LCD_voidInit+0xd6>
		__ticks = 1;
    14dc:	fe 01       	movw	r30, r28
    14de:	ed 57       	subi	r30, 0x7D	; 125
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	91 83       	std	Z+1, r25	; 0x01
    14e8:	80 83       	st	Z, r24
    14ea:	64 c0       	rjmp	.+200    	; 0x15b4 <LCD_voidInit+0x19e>
	else if (__tmp > 65535)
    14ec:	fe 01       	movw	r30, r28
    14ee:	eb 57       	subi	r30, 0x7B	; 123
    14f0:	ff 4f       	sbci	r31, 0xFF	; 255
    14f2:	60 81       	ld	r22, Z
    14f4:	71 81       	ldd	r23, Z+1	; 0x01
    14f6:	82 81       	ldd	r24, Z+2	; 0x02
    14f8:	93 81       	ldd	r25, Z+3	; 0x03
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	3f ef       	ldi	r19, 0xFF	; 255
    14fe:	4f e7       	ldi	r20, 0x7F	; 127
    1500:	57 e4       	ldi	r21, 0x47	; 71
    1502:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1506:	18 16       	cp	r1, r24
    1508:	0c f0       	brlt	.+2      	; 0x150c <LCD_voidInit+0xf6>
    150a:	43 c0       	rjmp	.+134    	; 0x1592 <LCD_voidInit+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150c:	fe 01       	movw	r30, r28
    150e:	e7 57       	subi	r30, 0x77	; 119
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	60 81       	ld	r22, Z
    1514:	71 81       	ldd	r23, Z+1	; 0x01
    1516:	82 81       	ldd	r24, Z+2	; 0x02
    1518:	93 81       	ldd	r25, Z+3	; 0x03
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e2       	ldi	r20, 0x20	; 32
    1520:	51 e4       	ldi	r21, 0x41	; 65
    1522:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	8e 01       	movw	r16, r28
    152c:	0d 57       	subi	r16, 0x7D	; 125
    152e:	1f 4f       	sbci	r17, 0xFF	; 255
    1530:	bc 01       	movw	r22, r24
    1532:	cd 01       	movw	r24, r26
    1534:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	f8 01       	movw	r30, r16
    153e:	91 83       	std	Z+1, r25	; 0x01
    1540:	80 83       	st	Z, r24
    1542:	1f c0       	rjmp	.+62     	; 0x1582 <LCD_voidInit+0x16c>
    1544:	fe 01       	movw	r30, r28
    1546:	ef 57       	subi	r30, 0x7F	; 127
    1548:	ff 4f       	sbci	r31, 0xFF	; 255
    154a:	88 ec       	ldi	r24, 0xC8	; 200
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	91 83       	std	Z+1, r25	; 0x01
    1550:	80 83       	st	Z, r24
    1552:	fe 01       	movw	r30, r28
    1554:	ef 57       	subi	r30, 0x7F	; 127
    1556:	ff 4f       	sbci	r31, 0xFF	; 255
    1558:	80 81       	ld	r24, Z
    155a:	91 81       	ldd	r25, Z+1	; 0x01
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <LCD_voidInit+0x146>
    1560:	fe 01       	movw	r30, r28
    1562:	ef 57       	subi	r30, 0x7F	; 127
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	91 83       	std	Z+1, r25	; 0x01
    1568:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156a:	de 01       	movw	r26, r28
    156c:	ad 57       	subi	r26, 0x7D	; 125
    156e:	bf 4f       	sbci	r27, 0xFF	; 255
    1570:	fe 01       	movw	r30, r28
    1572:	ed 57       	subi	r30, 0x7D	; 125
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	80 81       	ld	r24, Z
    1578:	91 81       	ldd	r25, Z+1	; 0x01
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	11 96       	adiw	r26, 0x01	; 1
    157e:	9c 93       	st	X, r25
    1580:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1582:	fe 01       	movw	r30, r28
    1584:	ed 57       	subi	r30, 0x7D	; 125
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	80 81       	ld	r24, Z
    158a:	91 81       	ldd	r25, Z+1	; 0x01
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	d1 f6       	brne	.-76     	; 0x1544 <LCD_voidInit+0x12e>
    1590:	27 c0       	rjmp	.+78     	; 0x15e0 <LCD_voidInit+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1592:	8e 01       	movw	r16, r28
    1594:	0d 57       	subi	r16, 0x7D	; 125
    1596:	1f 4f       	sbci	r17, 0xFF	; 255
    1598:	fe 01       	movw	r30, r28
    159a:	eb 57       	subi	r30, 0x7B	; 123
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	60 81       	ld	r22, Z
    15a0:	71 81       	ldd	r23, Z+1	; 0x01
    15a2:	82 81       	ldd	r24, Z+2	; 0x02
    15a4:	93 81       	ldd	r25, Z+3	; 0x03
    15a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	f8 01       	movw	r30, r16
    15b0:	91 83       	std	Z+1, r25	; 0x01
    15b2:	80 83       	st	Z, r24
    15b4:	de 01       	movw	r26, r28
    15b6:	a1 58       	subi	r26, 0x81	; 129
    15b8:	bf 4f       	sbci	r27, 0xFF	; 255
    15ba:	fe 01       	movw	r30, r28
    15bc:	ed 57       	subi	r30, 0x7D	; 125
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	80 81       	ld	r24, Z
    15c2:	91 81       	ldd	r25, Z+1	; 0x01
    15c4:	8d 93       	st	X+, r24
    15c6:	9c 93       	st	X, r25
    15c8:	fe 01       	movw	r30, r28
    15ca:	e1 58       	subi	r30, 0x81	; 129
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	80 81       	ld	r24, Z
    15d0:	91 81       	ldd	r25, Z+1	; 0x01
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	f1 f7       	brne	.-4      	; 0x15d2 <LCD_voidInit+0x1bc>
    15d6:	fe 01       	movw	r30, r28
    15d8:	e1 58       	subi	r30, 0x81	; 129
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	91 83       	std	Z+1, r25	; 0x01
    15de:	80 83       	st	Z, r24
		{
			/* Step 1 */
			_delay_ms(30);
			/* Step 2 */
			u8CmdLoc = (0b00110000)  |
    15e0:	fe 01       	movw	r30, r28
    15e2:	e2 57       	subi	r30, 0x72	; 114
    15e4:	ff 4f       	sbci	r31, 0xFF	; 255
    15e6:	80 81       	ld	r24, Z
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	c9 01       	movw	r24, r18
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	82 0f       	add	r24, r18
    15f4:	93 1f       	adc	r25, r19
    15f6:	88 0f       	add	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	fc 01       	movw	r30, r24
    1600:	ee 57       	subi	r30, 0x7E	; 126
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	80 81       	ld	r24, Z
    1606:	86 95       	lsr	r24
    1608:	81 70       	andi	r24, 0x01	; 1
    160a:	88 2f       	mov	r24, r24
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	48 2f       	mov	r20, r24
    161c:	40 63       	ori	r20, 0x30	; 48
    161e:	fe 01       	movw	r30, r28
    1620:	e2 57       	subi	r30, 0x72	; 114
    1622:	ff 4f       	sbci	r31, 0xFF	; 255
    1624:	80 81       	ld	r24, Z
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	c9 01       	movw	r24, r18
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	82 0f       	add	r24, r18
    1632:	93 1f       	adc	r25, r19
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	fc 01       	movw	r30, r24
    163e:	ee 57       	subi	r30, 0x7E	; 126
    1640:	ff 4f       	sbci	r31, 0xFF	; 255
    1642:	80 81       	ld	r24, Z
    1644:	86 95       	lsr	r24
    1646:	86 95       	lsr	r24
    1648:	81 70       	andi	r24, 0x01	; 1
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	84 2b       	or	r24, r20
    1658:	fe 01       	movw	r30, r28
    165a:	e3 57       	subi	r30, 0x73	; 115
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8UsedLines  << 3 )|
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CharFont   << 2 );
			
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    1660:	fe 01       	movw	r30, r28
    1662:	e2 57       	subi	r30, 0x72	; 114
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	de 01       	movw	r26, r28
    1668:	a3 57       	subi	r26, 0x73	; 115
    166a:	bf 4f       	sbci	r27, 0xFF	; 255
    166c:	80 81       	ld	r24, Z
    166e:	6c 91       	ld	r22, X
    1670:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <voidWriteCmd>
    1674:	fe 01       	movw	r30, r28
    1676:	e5 58       	subi	r30, 0x85	; 133
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	a0 e8       	ldi	r26, 0x80	; 128
    1680:	bf e3       	ldi	r27, 0x3F	; 63
    1682:	80 83       	st	Z, r24
    1684:	91 83       	std	Z+1, r25	; 0x01
    1686:	a2 83       	std	Z+2, r26	; 0x02
    1688:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    168a:	8e 01       	movw	r16, r28
    168c:	09 58       	subi	r16, 0x89	; 137
    168e:	1f 4f       	sbci	r17, 0xFF	; 255
    1690:	fe 01       	movw	r30, r28
    1692:	e5 58       	subi	r30, 0x85	; 133
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	60 81       	ld	r22, Z
    1698:	71 81       	ldd	r23, Z+1	; 0x01
    169a:	82 81       	ldd	r24, Z+2	; 0x02
    169c:	93 81       	ldd	r25, Z+3	; 0x03
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	4a ef       	ldi	r20, 0xFA	; 250
    16a4:	54 e4       	ldi	r21, 0x44	; 68
    16a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	f8 01       	movw	r30, r16
    16b0:	80 83       	st	Z, r24
    16b2:	91 83       	std	Z+1, r25	; 0x01
    16b4:	a2 83       	std	Z+2, r26	; 0x02
    16b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16b8:	fe 01       	movw	r30, r28
    16ba:	e9 58       	subi	r30, 0x89	; 137
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	60 81       	ld	r22, Z
    16c0:	71 81       	ldd	r23, Z+1	; 0x01
    16c2:	82 81       	ldd	r24, Z+2	; 0x02
    16c4:	93 81       	ldd	r25, Z+3	; 0x03
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e8       	ldi	r20, 0x80	; 128
    16cc:	5f e3       	ldi	r21, 0x3F	; 63
    16ce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16d2:	88 23       	and	r24, r24
    16d4:	44 f4       	brge	.+16     	; 0x16e6 <LCD_voidInit+0x2d0>
		__ticks = 1;
    16d6:	fe 01       	movw	r30, r28
    16d8:	eb 58       	subi	r30, 0x8B	; 139
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	91 83       	std	Z+1, r25	; 0x01
    16e2:	80 83       	st	Z, r24
    16e4:	64 c0       	rjmp	.+200    	; 0x17ae <LCD_voidInit+0x398>
	else if (__tmp > 65535)
    16e6:	fe 01       	movw	r30, r28
    16e8:	e9 58       	subi	r30, 0x89	; 137
    16ea:	ff 4f       	sbci	r31, 0xFF	; 255
    16ec:	60 81       	ld	r22, Z
    16ee:	71 81       	ldd	r23, Z+1	; 0x01
    16f0:	82 81       	ldd	r24, Z+2	; 0x02
    16f2:	93 81       	ldd	r25, Z+3	; 0x03
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	3f ef       	ldi	r19, 0xFF	; 255
    16f8:	4f e7       	ldi	r20, 0x7F	; 127
    16fa:	57 e4       	ldi	r21, 0x47	; 71
    16fc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1700:	18 16       	cp	r1, r24
    1702:	0c f0       	brlt	.+2      	; 0x1706 <LCD_voidInit+0x2f0>
    1704:	43 c0       	rjmp	.+134    	; 0x178c <LCD_voidInit+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1706:	fe 01       	movw	r30, r28
    1708:	e5 58       	subi	r30, 0x85	; 133
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	60 81       	ld	r22, Z
    170e:	71 81       	ldd	r23, Z+1	; 0x01
    1710:	82 81       	ldd	r24, Z+2	; 0x02
    1712:	93 81       	ldd	r25, Z+3	; 0x03
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	40 e2       	ldi	r20, 0x20	; 32
    171a:	51 e4       	ldi	r21, 0x41	; 65
    171c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	8e 01       	movw	r16, r28
    1726:	0b 58       	subi	r16, 0x8B	; 139
    1728:	1f 4f       	sbci	r17, 0xFF	; 255
    172a:	bc 01       	movw	r22, r24
    172c:	cd 01       	movw	r24, r26
    172e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	f8 01       	movw	r30, r16
    1738:	91 83       	std	Z+1, r25	; 0x01
    173a:	80 83       	st	Z, r24
    173c:	1f c0       	rjmp	.+62     	; 0x177c <LCD_voidInit+0x366>
    173e:	fe 01       	movw	r30, r28
    1740:	ed 58       	subi	r30, 0x8D	; 141
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	88 ec       	ldi	r24, 0xC8	; 200
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	91 83       	std	Z+1, r25	; 0x01
    174a:	80 83       	st	Z, r24
    174c:	fe 01       	movw	r30, r28
    174e:	ed 58       	subi	r30, 0x8D	; 141
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	80 81       	ld	r24, Z
    1754:	91 81       	ldd	r25, Z+1	; 0x01
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	f1 f7       	brne	.-4      	; 0x1756 <LCD_voidInit+0x340>
    175a:	fe 01       	movw	r30, r28
    175c:	ed 58       	subi	r30, 0x8D	; 141
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	91 83       	std	Z+1, r25	; 0x01
    1762:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1764:	de 01       	movw	r26, r28
    1766:	ab 58       	subi	r26, 0x8B	; 139
    1768:	bf 4f       	sbci	r27, 0xFF	; 255
    176a:	fe 01       	movw	r30, r28
    176c:	eb 58       	subi	r30, 0x8B	; 139
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	80 81       	ld	r24, Z
    1772:	91 81       	ldd	r25, Z+1	; 0x01
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	11 96       	adiw	r26, 0x01	; 1
    1778:	9c 93       	st	X, r25
    177a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177c:	fe 01       	movw	r30, r28
    177e:	eb 58       	subi	r30, 0x8B	; 139
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	80 81       	ld	r24, Z
    1784:	91 81       	ldd	r25, Z+1	; 0x01
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	d1 f6       	brne	.-76     	; 0x173e <LCD_voidInit+0x328>
    178a:	27 c0       	rjmp	.+78     	; 0x17da <LCD_voidInit+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    178c:	8e 01       	movw	r16, r28
    178e:	0b 58       	subi	r16, 0x8B	; 139
    1790:	1f 4f       	sbci	r17, 0xFF	; 255
    1792:	fe 01       	movw	r30, r28
    1794:	e9 58       	subi	r30, 0x89	; 137
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	60 81       	ld	r22, Z
    179a:	71 81       	ldd	r23, Z+1	; 0x01
    179c:	82 81       	ldd	r24, Z+2	; 0x02
    179e:	93 81       	ldd	r25, Z+3	; 0x03
    17a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	f8 01       	movw	r30, r16
    17aa:	91 83       	std	Z+1, r25	; 0x01
    17ac:	80 83       	st	Z, r24
    17ae:	de 01       	movw	r26, r28
    17b0:	af 58       	subi	r26, 0x8F	; 143
    17b2:	bf 4f       	sbci	r27, 0xFF	; 255
    17b4:	fe 01       	movw	r30, r28
    17b6:	eb 58       	subi	r30, 0x8B	; 139
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	80 81       	ld	r24, Z
    17bc:	91 81       	ldd	r25, Z+1	; 0x01
    17be:	8d 93       	st	X+, r24
    17c0:	9c 93       	st	X, r25
    17c2:	fe 01       	movw	r30, r28
    17c4:	ef 58       	subi	r30, 0x8F	; 143
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	80 81       	ld	r24, Z
    17ca:	91 81       	ldd	r25, Z+1	; 0x01
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <LCD_voidInit+0x3b6>
    17d0:	fe 01       	movw	r30, r28
    17d2:	ef 58       	subi	r30, 0x8F	; 143
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	91 83       	std	Z+1, r25	; 0x01
    17d8:	80 83       	st	Z, r24
			/* Step 3 */
			_delay_ms(1);
			/* Step 4 */
			u8CmdLoc =   (0b00001000) |
    17da:	fe 01       	movw	r30, r28
    17dc:	e2 57       	subi	r30, 0x72	; 114
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	80 81       	ld	r24, Z
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	c9 01       	movw	r24, r18
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	82 0f       	add	r24, r18
    17ee:	93 1f       	adc	r25, r19
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	fc 01       	movw	r30, r24
    17fa:	ee 57       	subi	r30, 0x7E	; 126
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	80 81       	ld	r24, Z
    1800:	86 95       	lsr	r24
    1802:	86 95       	lsr	r24
    1804:	86 95       	lsr	r24
    1806:	81 70       	andi	r24, 0x01	; 1
    1808:	88 2f       	mov	r24, r24
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	48 2f       	mov	r20, r24
    1816:	48 60       	ori	r20, 0x08	; 8
    1818:	fe 01       	movw	r30, r28
    181a:	e2 57       	subi	r30, 0x72	; 114
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	80 81       	ld	r24, Z
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	c9 01       	movw	r24, r18
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	82 0f       	add	r24, r18
    182c:	93 1f       	adc	r25, r19
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	fc 01       	movw	r30, r24
    1838:	ee 57       	subi	r30, 0x7E	; 126
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	80 81       	ld	r24, Z
    183e:	82 95       	swap	r24
    1840:	8f 70       	andi	r24, 0x0F	; 15
    1842:	81 70       	andi	r24, 0x01	; 1
    1844:	88 2f       	mov	r24, r24
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	48 2b       	or	r20, r24
    184e:	fe 01       	movw	r30, r28
    1850:	e2 57       	subi	r30, 0x72	; 114
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	80 81       	ld	r24, Z
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	c9 01       	movw	r24, r18
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	82 0f       	add	r24, r18
    1862:	93 1f       	adc	r25, r19
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	fc 01       	movw	r30, r24
    186e:	ee 57       	subi	r30, 0x7E	; 126
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	80 81       	ld	r24, Z
    1874:	82 95       	swap	r24
    1876:	86 95       	lsr	r24
    1878:	87 70       	andi	r24, 0x07	; 7
    187a:	81 70       	andi	r24, 0x01	; 1
    187c:	84 2b       	or	r24, r20
    187e:	fe 01       	movw	r30, r28
    1880:	e3 57       	subi	r30, 0x73	; 115
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	80 83       	st	Z, r24
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8DisplayState     << 2 )|
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CursorState      << 1 )|
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CursorBlinkState << 0 );			
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    1886:	fe 01       	movw	r30, r28
    1888:	e2 57       	subi	r30, 0x72	; 114
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	de 01       	movw	r26, r28
    188e:	a3 57       	subi	r26, 0x73	; 115
    1890:	bf 4f       	sbci	r27, 0xFF	; 255
    1892:	80 81       	ld	r24, Z
    1894:	6c 91       	ld	r22, X
    1896:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <voidWriteCmd>
    189a:	fe 01       	movw	r30, r28
    189c:	e3 59       	subi	r30, 0x93	; 147
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	a0 e8       	ldi	r26, 0x80	; 128
    18a6:	bf e3       	ldi	r27, 0x3F	; 63
    18a8:	80 83       	st	Z, r24
    18aa:	91 83       	std	Z+1, r25	; 0x01
    18ac:	a2 83       	std	Z+2, r26	; 0x02
    18ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b0:	8e 01       	movw	r16, r28
    18b2:	07 59       	subi	r16, 0x97	; 151
    18b4:	1f 4f       	sbci	r17, 0xFF	; 255
    18b6:	fe 01       	movw	r30, r28
    18b8:	e3 59       	subi	r30, 0x93	; 147
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	60 81       	ld	r22, Z
    18be:	71 81       	ldd	r23, Z+1	; 0x01
    18c0:	82 81       	ldd	r24, Z+2	; 0x02
    18c2:	93 81       	ldd	r25, Z+3	; 0x03
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	4a ef       	ldi	r20, 0xFA	; 250
    18ca:	54 e4       	ldi	r21, 0x44	; 68
    18cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	f8 01       	movw	r30, r16
    18d6:	80 83       	st	Z, r24
    18d8:	91 83       	std	Z+1, r25	; 0x01
    18da:	a2 83       	std	Z+2, r26	; 0x02
    18dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18de:	fe 01       	movw	r30, r28
    18e0:	e7 59       	subi	r30, 0x97	; 151
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	60 81       	ld	r22, Z
    18e6:	71 81       	ldd	r23, Z+1	; 0x01
    18e8:	82 81       	ldd	r24, Z+2	; 0x02
    18ea:	93 81       	ldd	r25, Z+3	; 0x03
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e8       	ldi	r20, 0x80	; 128
    18f2:	5f e3       	ldi	r21, 0x3F	; 63
    18f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18f8:	88 23       	and	r24, r24
    18fa:	44 f4       	brge	.+16     	; 0x190c <LCD_voidInit+0x4f6>
		__ticks = 1;
    18fc:	fe 01       	movw	r30, r28
    18fe:	e9 59       	subi	r30, 0x99	; 153
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	91 83       	std	Z+1, r25	; 0x01
    1908:	80 83       	st	Z, r24
    190a:	64 c0       	rjmp	.+200    	; 0x19d4 <LCD_voidInit+0x5be>
	else if (__tmp > 65535)
    190c:	fe 01       	movw	r30, r28
    190e:	e7 59       	subi	r30, 0x97	; 151
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	60 81       	ld	r22, Z
    1914:	71 81       	ldd	r23, Z+1	; 0x01
    1916:	82 81       	ldd	r24, Z+2	; 0x02
    1918:	93 81       	ldd	r25, Z+3	; 0x03
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	3f ef       	ldi	r19, 0xFF	; 255
    191e:	4f e7       	ldi	r20, 0x7F	; 127
    1920:	57 e4       	ldi	r21, 0x47	; 71
    1922:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1926:	18 16       	cp	r1, r24
    1928:	0c f0       	brlt	.+2      	; 0x192c <LCD_voidInit+0x516>
    192a:	43 c0       	rjmp	.+134    	; 0x19b2 <LCD_voidInit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192c:	fe 01       	movw	r30, r28
    192e:	e3 59       	subi	r30, 0x93	; 147
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	60 81       	ld	r22, Z
    1934:	71 81       	ldd	r23, Z+1	; 0x01
    1936:	82 81       	ldd	r24, Z+2	; 0x02
    1938:	93 81       	ldd	r25, Z+3	; 0x03
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	40 e2       	ldi	r20, 0x20	; 32
    1940:	51 e4       	ldi	r21, 0x41	; 65
    1942:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	8e 01       	movw	r16, r28
    194c:	09 59       	subi	r16, 0x99	; 153
    194e:	1f 4f       	sbci	r17, 0xFF	; 255
    1950:	bc 01       	movw	r22, r24
    1952:	cd 01       	movw	r24, r26
    1954:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	f8 01       	movw	r30, r16
    195e:	91 83       	std	Z+1, r25	; 0x01
    1960:	80 83       	st	Z, r24
    1962:	1f c0       	rjmp	.+62     	; 0x19a2 <LCD_voidInit+0x58c>
    1964:	fe 01       	movw	r30, r28
    1966:	eb 59       	subi	r30, 0x9B	; 155
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	88 ec       	ldi	r24, 0xC8	; 200
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	91 83       	std	Z+1, r25	; 0x01
    1970:	80 83       	st	Z, r24
    1972:	fe 01       	movw	r30, r28
    1974:	eb 59       	subi	r30, 0x9B	; 155
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	80 81       	ld	r24, Z
    197a:	91 81       	ldd	r25, Z+1	; 0x01
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	f1 f7       	brne	.-4      	; 0x197c <LCD_voidInit+0x566>
    1980:	fe 01       	movw	r30, r28
    1982:	eb 59       	subi	r30, 0x9B	; 155
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
    1986:	91 83       	std	Z+1, r25	; 0x01
    1988:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198a:	de 01       	movw	r26, r28
    198c:	a9 59       	subi	r26, 0x99	; 153
    198e:	bf 4f       	sbci	r27, 0xFF	; 255
    1990:	fe 01       	movw	r30, r28
    1992:	e9 59       	subi	r30, 0x99	; 153
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	80 81       	ld	r24, Z
    1998:	91 81       	ldd	r25, Z+1	; 0x01
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	11 96       	adiw	r26, 0x01	; 1
    199e:	9c 93       	st	X, r25
    19a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a2:	fe 01       	movw	r30, r28
    19a4:	e9 59       	subi	r30, 0x99	; 153
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	80 81       	ld	r24, Z
    19aa:	91 81       	ldd	r25, Z+1	; 0x01
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	d1 f6       	brne	.-76     	; 0x1964 <LCD_voidInit+0x54e>
    19b0:	27 c0       	rjmp	.+78     	; 0x1a00 <LCD_voidInit+0x5ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b2:	8e 01       	movw	r16, r28
    19b4:	09 59       	subi	r16, 0x99	; 153
    19b6:	1f 4f       	sbci	r17, 0xFF	; 255
    19b8:	fe 01       	movw	r30, r28
    19ba:	e7 59       	subi	r30, 0x97	; 151
    19bc:	ff 4f       	sbci	r31, 0xFF	; 255
    19be:	60 81       	ld	r22, Z
    19c0:	71 81       	ldd	r23, Z+1	; 0x01
    19c2:	82 81       	ldd	r24, Z+2	; 0x02
    19c4:	93 81       	ldd	r25, Z+3	; 0x03
    19c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	f8 01       	movw	r30, r16
    19d0:	91 83       	std	Z+1, r25	; 0x01
    19d2:	80 83       	st	Z, r24
    19d4:	de 01       	movw	r26, r28
    19d6:	ad 59       	subi	r26, 0x9D	; 157
    19d8:	bf 4f       	sbci	r27, 0xFF	; 255
    19da:	fe 01       	movw	r30, r28
    19dc:	e9 59       	subi	r30, 0x99	; 153
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	80 81       	ld	r24, Z
    19e2:	91 81       	ldd	r25, Z+1	; 0x01
    19e4:	8d 93       	st	X+, r24
    19e6:	9c 93       	st	X, r25
    19e8:	fe 01       	movw	r30, r28
    19ea:	ed 59       	subi	r30, 0x9D	; 157
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	80 81       	ld	r24, Z
    19f0:	91 81       	ldd	r25, Z+1	; 0x01
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	f1 f7       	brne	.-4      	; 0x19f2 <LCD_voidInit+0x5dc>
    19f6:	fe 01       	movw	r30, r28
    19f8:	ed 59       	subi	r30, 0x9D	; 157
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	91 83       	std	Z+1, r25	; 0x01
    19fe:	80 83       	st	Z, r24
			/* Step 5 */
			_delay_ms(1);
			/* Step 6 */
			voidWriteCmd(u8CntrLoc , 0x01);
    1a00:	fe 01       	movw	r30, r28
    1a02:	e2 57       	subi	r30, 0x72	; 114
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	80 81       	ld	r24, Z
    1a08:	61 e0       	ldi	r22, 0x01	; 1
    1a0a:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <voidWriteCmd>
    1a0e:	fe 01       	movw	r30, r28
    1a10:	e1 5a       	subi	r30, 0xA1	; 161
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	a0 e4       	ldi	r26, 0x40	; 64
    1a1a:	b0 e4       	ldi	r27, 0x40	; 64
    1a1c:	80 83       	st	Z, r24
    1a1e:	91 83       	std	Z+1, r25	; 0x01
    1a20:	a2 83       	std	Z+2, r26	; 0x02
    1a22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a24:	8e 01       	movw	r16, r28
    1a26:	05 5a       	subi	r16, 0xA5	; 165
    1a28:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e1 5a       	subi	r30, 0xA1	; 161
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	60 81       	ld	r22, Z
    1a32:	71 81       	ldd	r23, Z+1	; 0x01
    1a34:	82 81       	ldd	r24, Z+2	; 0x02
    1a36:	93 81       	ldd	r25, Z+3	; 0x03
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	4a ef       	ldi	r20, 0xFA	; 250
    1a3e:	54 e4       	ldi	r21, 0x44	; 68
    1a40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	f8 01       	movw	r30, r16
    1a4a:	80 83       	st	Z, r24
    1a4c:	91 83       	std	Z+1, r25	; 0x01
    1a4e:	a2 83       	std	Z+2, r26	; 0x02
    1a50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a52:	fe 01       	movw	r30, r28
    1a54:	e5 5a       	subi	r30, 0xA5	; 165
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	60 81       	ld	r22, Z
    1a5a:	71 81       	ldd	r23, Z+1	; 0x01
    1a5c:	82 81       	ldd	r24, Z+2	; 0x02
    1a5e:	93 81       	ldd	r25, Z+3	; 0x03
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e8       	ldi	r20, 0x80	; 128
    1a66:	5f e3       	ldi	r21, 0x3F	; 63
    1a68:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a6c:	88 23       	and	r24, r24
    1a6e:	44 f4       	brge	.+16     	; 0x1a80 <LCD_voidInit+0x66a>
		__ticks = 1;
    1a70:	fe 01       	movw	r30, r28
    1a72:	e7 5a       	subi	r30, 0xA7	; 167
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	91 83       	std	Z+1, r25	; 0x01
    1a7c:	80 83       	st	Z, r24
    1a7e:	64 c0       	rjmp	.+200    	; 0x1b48 <LCD_voidInit+0x732>
	else if (__tmp > 65535)
    1a80:	fe 01       	movw	r30, r28
    1a82:	e5 5a       	subi	r30, 0xA5	; 165
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	60 81       	ld	r22, Z
    1a88:	71 81       	ldd	r23, Z+1	; 0x01
    1a8a:	82 81       	ldd	r24, Z+2	; 0x02
    1a8c:	93 81       	ldd	r25, Z+3	; 0x03
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	3f ef       	ldi	r19, 0xFF	; 255
    1a92:	4f e7       	ldi	r20, 0x7F	; 127
    1a94:	57 e4       	ldi	r21, 0x47	; 71
    1a96:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a9a:	18 16       	cp	r1, r24
    1a9c:	0c f0       	brlt	.+2      	; 0x1aa0 <LCD_voidInit+0x68a>
    1a9e:	43 c0       	rjmp	.+134    	; 0x1b26 <LCD_voidInit+0x710>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	e1 5a       	subi	r30, 0xA1	; 161
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	60 81       	ld	r22, Z
    1aa8:	71 81       	ldd	r23, Z+1	; 0x01
    1aaa:	82 81       	ldd	r24, Z+2	; 0x02
    1aac:	93 81       	ldd	r25, Z+3	; 0x03
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e2       	ldi	r20, 0x20	; 32
    1ab4:	51 e4       	ldi	r21, 0x41	; 65
    1ab6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	8e 01       	movw	r16, r28
    1ac0:	07 5a       	subi	r16, 0xA7	; 167
    1ac2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac4:	bc 01       	movw	r22, r24
    1ac6:	cd 01       	movw	r24, r26
    1ac8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	f8 01       	movw	r30, r16
    1ad2:	91 83       	std	Z+1, r25	; 0x01
    1ad4:	80 83       	st	Z, r24
    1ad6:	1f c0       	rjmp	.+62     	; 0x1b16 <LCD_voidInit+0x700>
    1ad8:	fe 01       	movw	r30, r28
    1ada:	e9 5a       	subi	r30, 0xA9	; 169
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	88 ec       	ldi	r24, 0xC8	; 200
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	91 83       	std	Z+1, r25	; 0x01
    1ae4:	80 83       	st	Z, r24
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	e9 5a       	subi	r30, 0xA9	; 169
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	80 81       	ld	r24, Z
    1aee:	91 81       	ldd	r25, Z+1	; 0x01
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <LCD_voidInit+0x6da>
    1af4:	fe 01       	movw	r30, r28
    1af6:	e9 5a       	subi	r30, 0xA9	; 169
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	91 83       	std	Z+1, r25	; 0x01
    1afc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afe:	de 01       	movw	r26, r28
    1b00:	a7 5a       	subi	r26, 0xA7	; 167
    1b02:	bf 4f       	sbci	r27, 0xFF	; 255
    1b04:	fe 01       	movw	r30, r28
    1b06:	e7 5a       	subi	r30, 0xA7	; 167
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	80 81       	ld	r24, Z
    1b0c:	91 81       	ldd	r25, Z+1	; 0x01
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	11 96       	adiw	r26, 0x01	; 1
    1b12:	9c 93       	st	X, r25
    1b14:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b16:	fe 01       	movw	r30, r28
    1b18:	e7 5a       	subi	r30, 0xA7	; 167
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	80 81       	ld	r24, Z
    1b1e:	91 81       	ldd	r25, Z+1	; 0x01
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	d1 f6       	brne	.-76     	; 0x1ad8 <LCD_voidInit+0x6c2>
    1b24:	27 c0       	rjmp	.+78     	; 0x1b74 <LCD_voidInit+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b26:	8e 01       	movw	r16, r28
    1b28:	07 5a       	subi	r16, 0xA7	; 167
    1b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	e5 5a       	subi	r30, 0xA5	; 165
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	60 81       	ld	r22, Z
    1b34:	71 81       	ldd	r23, Z+1	; 0x01
    1b36:	82 81       	ldd	r24, Z+2	; 0x02
    1b38:	93 81       	ldd	r25, Z+3	; 0x03
    1b3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	f8 01       	movw	r30, r16
    1b44:	91 83       	std	Z+1, r25	; 0x01
    1b46:	80 83       	st	Z, r24
    1b48:	de 01       	movw	r26, r28
    1b4a:	ab 5a       	subi	r26, 0xAB	; 171
    1b4c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b4e:	fe 01       	movw	r30, r28
    1b50:	e7 5a       	subi	r30, 0xA7	; 167
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	80 81       	ld	r24, Z
    1b56:	91 81       	ldd	r25, Z+1	; 0x01
    1b58:	8d 93       	st	X+, r24
    1b5a:	9c 93       	st	X, r25
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	eb 5a       	subi	r30, 0xAB	; 171
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	80 81       	ld	r24, Z
    1b64:	91 81       	ldd	r25, Z+1	; 0x01
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <LCD_voidInit+0x750>
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	eb 5a       	subi	r30, 0xAB	; 171
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	91 83       	std	Z+1, r25	; 0x01
    1b72:	80 83       	st	Z, r24
			/* Step 7 */
			_delay_ms(3);
			/* Step 8 */
			u8CmdLoc =   (0b00000100) |
    1b74:	fe 01       	movw	r30, r28
    1b76:	e2 57       	subi	r30, 0x72	; 114
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	80 81       	ld	r24, Z
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	c9 01       	movw	r24, r18
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	82 0f       	add	r24, r18
    1b88:	93 1f       	adc	r25, r19
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	fc 01       	movw	r30, r24
    1b94:	ee 57       	subi	r30, 0x7E	; 126
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	80 81       	ld	r24, Z
    1b9a:	82 95       	swap	r24
    1b9c:	86 95       	lsr	r24
    1b9e:	86 95       	lsr	r24
    1ba0:	83 70       	andi	r24, 0x03	; 3
    1ba2:	81 70       	andi	r24, 0x01	; 1
    1ba4:	88 2f       	mov	r24, r24
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	48 2f       	mov	r20, r24
    1bae:	44 60       	ori	r20, 0x04	; 4
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	e2 57       	subi	r30, 0x72	; 114
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	80 81       	ld	r24, Z
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	c9 01       	movw	r24, r18
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	82 0f       	add	r24, r18
    1bc4:	93 1f       	adc	r25, r19
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	fc 01       	movw	r30, r24
    1bd0:	ee 57       	subi	r30, 0x7E	; 126
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	80 81       	ld	r24, Z
    1bd6:	88 1f       	adc	r24, r24
    1bd8:	88 27       	eor	r24, r24
    1bda:	88 1f       	adc	r24, r24
    1bdc:	84 2b       	or	r24, r20
    1bde:	fe 01       	movw	r30, r28
    1be0:	e3 57       	subi	r30, 0x73	; 115
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8IncrementMode  << 1 )|
            (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8ShiftMode      << 0 );
                        
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    1be6:	fe 01       	movw	r30, r28
    1be8:	e2 57       	subi	r30, 0x72	; 114
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	de 01       	movw	r26, r28
    1bee:	a3 57       	subi	r26, 0x73	; 115
    1bf0:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf2:	80 81       	ld	r24, Z
    1bf4:	6c 91       	ld	r22, X
    1bf6:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <voidWriteCmd>
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	ef 5a       	subi	r30, 0xAF	; 175
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	a0 e4       	ldi	r26, 0x40	; 64
    1c06:	b0 e4       	ldi	r27, 0x40	; 64
    1c08:	80 83       	st	Z, r24
    1c0a:	91 83       	std	Z+1, r25	; 0x01
    1c0c:	a2 83       	std	Z+2, r26	; 0x02
    1c0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c10:	8e 01       	movw	r16, r28
    1c12:	03 5b       	subi	r16, 0xB3	; 179
    1c14:	1f 4f       	sbci	r17, 0xFF	; 255
    1c16:	fe 01       	movw	r30, r28
    1c18:	ef 5a       	subi	r30, 0xAF	; 175
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	60 81       	ld	r22, Z
    1c1e:	71 81       	ldd	r23, Z+1	; 0x01
    1c20:	82 81       	ldd	r24, Z+2	; 0x02
    1c22:	93 81       	ldd	r25, Z+3	; 0x03
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	4a ef       	ldi	r20, 0xFA	; 250
    1c2a:	54 e4       	ldi	r21, 0x44	; 68
    1c2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	f8 01       	movw	r30, r16
    1c36:	80 83       	st	Z, r24
    1c38:	91 83       	std	Z+1, r25	; 0x01
    1c3a:	a2 83       	std	Z+2, r26	; 0x02
    1c3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e3 5b       	subi	r30, 0xB3	; 179
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	60 81       	ld	r22, Z
    1c46:	71 81       	ldd	r23, Z+1	; 0x01
    1c48:	82 81       	ldd	r24, Z+2	; 0x02
    1c4a:	93 81       	ldd	r25, Z+3	; 0x03
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e8       	ldi	r20, 0x80	; 128
    1c52:	5f e3       	ldi	r21, 0x3F	; 63
    1c54:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c58:	88 23       	and	r24, r24
    1c5a:	44 f4       	brge	.+16     	; 0x1c6c <LCD_voidInit+0x856>
		__ticks = 1;
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	e5 5b       	subi	r30, 0xB5	; 181
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	80 83       	st	Z, r24
    1c6a:	64 c0       	rjmp	.+200    	; 0x1d34 <LCD_voidInit+0x91e>
	else if (__tmp > 65535)
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	e3 5b       	subi	r30, 0xB3	; 179
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	60 81       	ld	r22, Z
    1c74:	71 81       	ldd	r23, Z+1	; 0x01
    1c76:	82 81       	ldd	r24, Z+2	; 0x02
    1c78:	93 81       	ldd	r25, Z+3	; 0x03
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	3f ef       	ldi	r19, 0xFF	; 255
    1c7e:	4f e7       	ldi	r20, 0x7F	; 127
    1c80:	57 e4       	ldi	r21, 0x47	; 71
    1c82:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c86:	18 16       	cp	r1, r24
    1c88:	0c f0       	brlt	.+2      	; 0x1c8c <LCD_voidInit+0x876>
    1c8a:	43 c0       	rjmp	.+134    	; 0x1d12 <LCD_voidInit+0x8fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	ef 5a       	subi	r30, 0xAF	; 175
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	60 81       	ld	r22, Z
    1c94:	71 81       	ldd	r23, Z+1	; 0x01
    1c96:	82 81       	ldd	r24, Z+2	; 0x02
    1c98:	93 81       	ldd	r25, Z+3	; 0x03
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	40 e2       	ldi	r20, 0x20	; 32
    1ca0:	51 e4       	ldi	r21, 0x41	; 65
    1ca2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	8e 01       	movw	r16, r28
    1cac:	05 5b       	subi	r16, 0xB5	; 181
    1cae:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb0:	bc 01       	movw	r22, r24
    1cb2:	cd 01       	movw	r24, r26
    1cb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	91 83       	std	Z+1, r25	; 0x01
    1cc0:	80 83       	st	Z, r24
    1cc2:	1f c0       	rjmp	.+62     	; 0x1d02 <LCD_voidInit+0x8ec>
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	e7 5b       	subi	r30, 0xB7	; 183
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	88 ec       	ldi	r24, 0xC8	; 200
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	91 83       	std	Z+1, r25	; 0x01
    1cd0:	80 83       	st	Z, r24
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	e7 5b       	subi	r30, 0xB7	; 183
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	80 81       	ld	r24, Z
    1cda:	91 81       	ldd	r25, Z+1	; 0x01
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	f1 f7       	brne	.-4      	; 0x1cdc <LCD_voidInit+0x8c6>
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	e7 5b       	subi	r30, 0xB7	; 183
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	91 83       	std	Z+1, r25	; 0x01
    1ce8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cea:	de 01       	movw	r26, r28
    1cec:	a5 5b       	subi	r26, 0xB5	; 181
    1cee:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	e5 5b       	subi	r30, 0xB5	; 181
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	80 81       	ld	r24, Z
    1cf8:	91 81       	ldd	r25, Z+1	; 0x01
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	11 96       	adiw	r26, 0x01	; 1
    1cfe:	9c 93       	st	X, r25
    1d00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d02:	fe 01       	movw	r30, r28
    1d04:	e5 5b       	subi	r30, 0xB5	; 181
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	80 81       	ld	r24, Z
    1d0a:	91 81       	ldd	r25, Z+1	; 0x01
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	d1 f6       	brne	.-76     	; 0x1cc4 <LCD_voidInit+0x8ae>
    1d10:	b2 c3       	rjmp	.+1892   	; 0x2476 <LCD_voidInit+0x1060>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d12:	8e 01       	movw	r16, r28
    1d14:	05 5b       	subi	r16, 0xB5	; 181
    1d16:	1f 4f       	sbci	r17, 0xFF	; 255
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e3 5b       	subi	r30, 0xB3	; 179
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	60 81       	ld	r22, Z
    1d20:	71 81       	ldd	r23, Z+1	; 0x01
    1d22:	82 81       	ldd	r24, Z+2	; 0x02
    1d24:	93 81       	ldd	r25, Z+3	; 0x03
    1d26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	f8 01       	movw	r30, r16
    1d30:	91 83       	std	Z+1, r25	; 0x01
    1d32:	80 83       	st	Z, r24
    1d34:	de 01       	movw	r26, r28
    1d36:	a9 5b       	subi	r26, 0xB9	; 185
    1d38:	bf 4f       	sbci	r27, 0xFF	; 255
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	e5 5b       	subi	r30, 0xB5	; 181
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	80 81       	ld	r24, Z
    1d42:	91 81       	ldd	r25, Z+1	; 0x01
    1d44:	11 96       	adiw	r26, 0x01	; 1
    1d46:	9c 93       	st	X, r25
    1d48:	8e 93       	st	-X, r24
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e9 5b       	subi	r30, 0xB9	; 185
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 81       	ld	r24, Z
    1d52:	91 81       	ldd	r25, Z+1	; 0x01
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <LCD_voidInit+0x93e>
    1d58:	fe 01       	movw	r30, r28
    1d5a:	e9 5b       	subi	r30, 0xB9	; 185
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	91 83       	std	Z+1, r25	; 0x01
    1d60:	80 83       	st	Z, r24
    1d62:	89 c3       	rjmp	.+1810   	; 0x2476 <LCD_voidInit+0x1060>
    1d64:	fe 01       	movw	r30, r28
    1d66:	ed 5b       	subi	r30, 0xBD	; 189
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	a0 ef       	ldi	r26, 0xF0	; 240
    1d70:	b1 e4       	ldi	r27, 0x41	; 65
    1d72:	80 83       	st	Z, r24
    1d74:	91 83       	std	Z+1, r25	; 0x01
    1d76:	a2 83       	std	Z+2, r26	; 0x02
    1d78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7a:	8e 01       	movw	r16, r28
    1d7c:	01 5c       	subi	r16, 0xC1	; 193
    1d7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d80:	fe 01       	movw	r30, r28
    1d82:	ed 5b       	subi	r30, 0xBD	; 189
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	60 81       	ld	r22, Z
    1d88:	71 81       	ldd	r23, Z+1	; 0x01
    1d8a:	82 81       	ldd	r24, Z+2	; 0x02
    1d8c:	93 81       	ldd	r25, Z+3	; 0x03
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	4a ef       	ldi	r20, 0xFA	; 250
    1d94:	54 e4       	ldi	r21, 0x44	; 68
    1d96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	f8 01       	movw	r30, r16
    1da0:	80 83       	st	Z, r24
    1da2:	91 83       	std	Z+1, r25	; 0x01
    1da4:	a2 83       	std	Z+2, r26	; 0x02
    1da6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1da8:	fe 01       	movw	r30, r28
    1daa:	ff 96       	adiw	r30, 0x3f	; 63
    1dac:	60 81       	ld	r22, Z
    1dae:	71 81       	ldd	r23, Z+1	; 0x01
    1db0:	82 81       	ldd	r24, Z+2	; 0x02
    1db2:	93 81       	ldd	r25, Z+3	; 0x03
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e8       	ldi	r20, 0x80	; 128
    1dba:	5f e3       	ldi	r21, 0x3F	; 63
    1dbc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dc0:	88 23       	and	r24, r24
    1dc2:	2c f4       	brge	.+10     	; 0x1dce <LCD_voidInit+0x9b8>
		__ticks = 1;
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	9e af       	std	Y+62, r25	; 0x3e
    1dca:	8d af       	std	Y+61, r24	; 0x3d
    1dcc:	46 c0       	rjmp	.+140    	; 0x1e5a <LCD_voidInit+0xa44>
	else if (__tmp > 65535)
    1dce:	fe 01       	movw	r30, r28
    1dd0:	ff 96       	adiw	r30, 0x3f	; 63
    1dd2:	60 81       	ld	r22, Z
    1dd4:	71 81       	ldd	r23, Z+1	; 0x01
    1dd6:	82 81       	ldd	r24, Z+2	; 0x02
    1dd8:	93 81       	ldd	r25, Z+3	; 0x03
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	3f ef       	ldi	r19, 0xFF	; 255
    1dde:	4f e7       	ldi	r20, 0x7F	; 127
    1de0:	57 e4       	ldi	r21, 0x47	; 71
    1de2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1de6:	18 16       	cp	r1, r24
    1de8:	64 f5       	brge	.+88     	; 0x1e42 <LCD_voidInit+0xa2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dea:	fe 01       	movw	r30, r28
    1dec:	ed 5b       	subi	r30, 0xBD	; 189
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	60 81       	ld	r22, Z
    1df2:	71 81       	ldd	r23, Z+1	; 0x01
    1df4:	82 81       	ldd	r24, Z+2	; 0x02
    1df6:	93 81       	ldd	r25, Z+3	; 0x03
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e2       	ldi	r20, 0x20	; 32
    1dfe:	51 e4       	ldi	r21, 0x41	; 65
    1e00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	bc 01       	movw	r22, r24
    1e0a:	cd 01       	movw	r24, r26
    1e0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	9e af       	std	Y+62, r25	; 0x3e
    1e16:	8d af       	std	Y+61, r24	; 0x3d
    1e18:	0f c0       	rjmp	.+30     	; 0x1e38 <LCD_voidInit+0xa22>
    1e1a:	88 ec       	ldi	r24, 0xC8	; 200
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9c af       	std	Y+60, r25	; 0x3c
    1e20:	8b af       	std	Y+59, r24	; 0x3b
    1e22:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e24:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <LCD_voidInit+0xa10>
    1e2a:	9c af       	std	Y+60, r25	; 0x3c
    1e2c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e30:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	9e af       	std	Y+62, r25	; 0x3e
    1e36:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e38:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e3c:	00 97       	sbiw	r24, 0x00	; 0
    1e3e:	69 f7       	brne	.-38     	; 0x1e1a <LCD_voidInit+0xa04>
    1e40:	16 c0       	rjmp	.+44     	; 0x1e6e <LCD_voidInit+0xa58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e42:	fe 01       	movw	r30, r28
    1e44:	ff 96       	adiw	r30, 0x3f	; 63
    1e46:	60 81       	ld	r22, Z
    1e48:	71 81       	ldd	r23, Z+1	; 0x01
    1e4a:	82 81       	ldd	r24, Z+2	; 0x02
    1e4c:	93 81       	ldd	r25, Z+3	; 0x03
    1e4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	9e af       	std	Y+62, r25	; 0x3e
    1e58:	8d af       	std	Y+61, r24	; 0x3d
    1e5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e5e:	9a af       	std	Y+58, r25	; 0x3a
    1e60:	89 af       	std	Y+57, r24	; 0x39
    1e62:	89 ad       	ldd	r24, Y+57	; 0x39
    1e64:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <LCD_voidInit+0xa50>
    1e6a:	9a af       	std	Y+58, r25	; 0x3a
    1e6c:	89 af       	std	Y+57, r24	; 0x39
		else 
		{
			/* Step 1 */
			_delay_ms(30);
			/* Step 2 */
			voidWriteCmd(u8CntrLoc , 0b00100000);
    1e6e:	fe 01       	movw	r30, r28
    1e70:	e2 57       	subi	r30, 0x72	; 114
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	80 81       	ld	r24, Z
    1e76:	60 e2       	ldi	r22, 0x20	; 32
    1e78:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <voidWriteCmd>
			voidWriteCmd(u8CntrLoc , 0b00100000);
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e2 57       	subi	r30, 0x72	; 114
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	80 81       	ld	r24, Z
    1e84:	60 e2       	ldi	r22, 0x20	; 32
    1e86:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <voidWriteCmd>
			u8CmdLoc = (0b00100000)  |
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	e2 57       	subi	r30, 0x72	; 114
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	80 81       	ld	r24, Z
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	c9 01       	movw	r24, r18
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	82 0f       	add	r24, r18
    1e9e:	93 1f       	adc	r25, r19
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	88 0f       	add	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	ee 57       	subi	r30, 0x7E	; 126
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	80 81       	ld	r24, Z
    1eb0:	86 95       	lsr	r24
    1eb2:	81 70       	andi	r24, 0x01	; 1
    1eb4:	88 2f       	mov	r24, r24
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	96 95       	lsr	r25
    1eba:	98 2f       	mov	r25, r24
    1ebc:	88 27       	eor	r24, r24
    1ebe:	97 95       	ror	r25
    1ec0:	87 95       	ror	r24
    1ec2:	48 2f       	mov	r20, r24
    1ec4:	40 62       	ori	r20, 0x20	; 32
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	e2 57       	subi	r30, 0x72	; 114
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	80 81       	ld	r24, Z
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	c9 01       	movw	r24, r18
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	82 0f       	add	r24, r18
    1eda:	93 1f       	adc	r25, r19
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	ee 57       	subi	r30, 0x7E	; 126
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	80 81       	ld	r24, Z
    1eec:	86 95       	lsr	r24
    1eee:	86 95       	lsr	r24
    1ef0:	81 70       	andi	r24, 0x01	; 1
    1ef2:	88 2f       	mov	r24, r24
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	00 24       	eor	r0, r0
    1ef8:	96 95       	lsr	r25
    1efa:	87 95       	ror	r24
    1efc:	07 94       	ror	r0
    1efe:	96 95       	lsr	r25
    1f00:	87 95       	ror	r24
    1f02:	07 94       	ror	r0
    1f04:	98 2f       	mov	r25, r24
    1f06:	80 2d       	mov	r24, r0
    1f08:	84 2b       	or	r24, r20
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	e3 57       	subi	r30, 0x73	; 115
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8UsedLines  << 7 )|
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CharFont   << 6 );
			
		    voidWriteCmd(u8CntrLoc , u8CmdLoc);
    1f12:	fe 01       	movw	r30, r28
    1f14:	e2 57       	subi	r30, 0x72	; 114
    1f16:	ff 4f       	sbci	r31, 0xFF	; 255
    1f18:	de 01       	movw	r26, r28
    1f1a:	a3 57       	subi	r26, 0x73	; 115
    1f1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f1e:	80 81       	ld	r24, Z
    1f20:	6c 91       	ld	r22, X
    1f22:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <voidWriteCmd>
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	a0 e8       	ldi	r26, 0x80	; 128
    1f2c:	bf e3       	ldi	r27, 0x3F	; 63
    1f2e:	8d ab       	std	Y+53, r24	; 0x35
    1f30:	9e ab       	std	Y+54, r25	; 0x36
    1f32:	af ab       	std	Y+55, r26	; 0x37
    1f34:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f36:	6d a9       	ldd	r22, Y+53	; 0x35
    1f38:	7e a9       	ldd	r23, Y+54	; 0x36
    1f3a:	8f a9       	ldd	r24, Y+55	; 0x37
    1f3c:	98 ad       	ldd	r25, Y+56	; 0x38
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	4a ef       	ldi	r20, 0xFA	; 250
    1f44:	54 e4       	ldi	r21, 0x44	; 68
    1f46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	89 ab       	std	Y+49, r24	; 0x31
    1f50:	9a ab       	std	Y+50, r25	; 0x32
    1f52:	ab ab       	std	Y+51, r26	; 0x33
    1f54:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f56:	69 a9       	ldd	r22, Y+49	; 0x31
    1f58:	7a a9       	ldd	r23, Y+50	; 0x32
    1f5a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f5c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e8       	ldi	r20, 0x80	; 128
    1f64:	5f e3       	ldi	r21, 0x3F	; 63
    1f66:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f6a:	88 23       	and	r24, r24
    1f6c:	2c f4       	brge	.+10     	; 0x1f78 <LCD_voidInit+0xb62>
		__ticks = 1;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	98 ab       	std	Y+48, r25	; 0x30
    1f74:	8f a7       	std	Y+47, r24	; 0x2f
    1f76:	3f c0       	rjmp	.+126    	; 0x1ff6 <LCD_voidInit+0xbe0>
	else if (__tmp > 65535)
    1f78:	69 a9       	ldd	r22, Y+49	; 0x31
    1f7a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f7c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f7e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	3f ef       	ldi	r19, 0xFF	; 255
    1f84:	4f e7       	ldi	r20, 0x7F	; 127
    1f86:	57 e4       	ldi	r21, 0x47	; 71
    1f88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f8c:	18 16       	cp	r1, r24
    1f8e:	4c f5       	brge	.+82     	; 0x1fe2 <LCD_voidInit+0xbcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f90:	6d a9       	ldd	r22, Y+53	; 0x35
    1f92:	7e a9       	ldd	r23, Y+54	; 0x36
    1f94:	8f a9       	ldd	r24, Y+55	; 0x37
    1f96:	98 ad       	ldd	r25, Y+56	; 0x38
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e2       	ldi	r20, 0x20	; 32
    1f9e:	51 e4       	ldi	r21, 0x41	; 65
    1fa0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	bc 01       	movw	r22, r24
    1faa:	cd 01       	movw	r24, r26
    1fac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	98 ab       	std	Y+48, r25	; 0x30
    1fb6:	8f a7       	std	Y+47, r24	; 0x2f
    1fb8:	0f c0       	rjmp	.+30     	; 0x1fd8 <LCD_voidInit+0xbc2>
    1fba:	88 ec       	ldi	r24, 0xC8	; 200
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	9e a7       	std	Y+46, r25	; 0x2e
    1fc0:	8d a7       	std	Y+45, r24	; 0x2d
    1fc2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fc4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <LCD_voidInit+0xbb0>
    1fca:	9e a7       	std	Y+46, r25	; 0x2e
    1fcc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fce:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fd0:	98 a9       	ldd	r25, Y+48	; 0x30
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	98 ab       	std	Y+48, r25	; 0x30
    1fd6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fda:	98 a9       	ldd	r25, Y+48	; 0x30
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	69 f7       	brne	.-38     	; 0x1fba <LCD_voidInit+0xba4>
    1fe0:	14 c0       	rjmp	.+40     	; 0x200a <LCD_voidInit+0xbf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe2:	69 a9       	ldd	r22, Y+49	; 0x31
    1fe4:	7a a9       	ldd	r23, Y+50	; 0x32
    1fe6:	8b a9       	ldd	r24, Y+51	; 0x33
    1fe8:	9c a9       	ldd	r25, Y+52	; 0x34
    1fea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	98 ab       	std	Y+48, r25	; 0x30
    1ff4:	8f a7       	std	Y+47, r24	; 0x2f
    1ff6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ff8:	98 a9       	ldd	r25, Y+48	; 0x30
    1ffa:	9c a7       	std	Y+44, r25	; 0x2c
    1ffc:	8b a7       	std	Y+43, r24	; 0x2b
    1ffe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2000:	9c a5       	ldd	r25, Y+44	; 0x2c
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <LCD_voidInit+0xbec>
    2006:	9c a7       	std	Y+44, r25	; 0x2c
    2008:	8b a7       	std	Y+43, r24	; 0x2b
			/* Step 3 */
			_delay_ms(1);
			/* Step 4 */
			voidWriteCmd(u8CntrLoc , 0b00000000);
    200a:	fe 01       	movw	r30, r28
    200c:	e2 57       	subi	r30, 0x72	; 114
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	80 81       	ld	r24, Z
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <voidWriteCmd>
			
			u8CmdLoc =   (0b10000000) |
    2018:	fe 01       	movw	r30, r28
    201a:	e2 57       	subi	r30, 0x72	; 114
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	80 81       	ld	r24, Z
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	c9 01       	movw	r24, r18
    2026:	88 0f       	add	r24, r24
    2028:	99 1f       	adc	r25, r25
    202a:	82 0f       	add	r24, r18
    202c:	93 1f       	adc	r25, r19
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	88 0f       	add	r24, r24
    2034:	99 1f       	adc	r25, r25
    2036:	fc 01       	movw	r30, r24
    2038:	ee 57       	subi	r30, 0x7E	; 126
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	80 81       	ld	r24, Z
    203e:	86 95       	lsr	r24
    2040:	86 95       	lsr	r24
    2042:	86 95       	lsr	r24
    2044:	81 70       	andi	r24, 0x01	; 1
    2046:	88 2f       	mov	r24, r24
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	00 24       	eor	r0, r0
    204c:	96 95       	lsr	r25
    204e:	87 95       	ror	r24
    2050:	07 94       	ror	r0
    2052:	96 95       	lsr	r25
    2054:	87 95       	ror	r24
    2056:	07 94       	ror	r0
    2058:	98 2f       	mov	r25, r24
    205a:	80 2d       	mov	r24, r0
    205c:	48 2f       	mov	r20, r24
    205e:	40 68       	ori	r20, 0x80	; 128
    2060:	fe 01       	movw	r30, r28
    2062:	e2 57       	subi	r30, 0x72	; 114
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	80 81       	ld	r24, Z
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	c9 01       	movw	r24, r18
    206e:	88 0f       	add	r24, r24
    2070:	99 1f       	adc	r25, r25
    2072:	82 0f       	add	r24, r18
    2074:	93 1f       	adc	r25, r19
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	88 0f       	add	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	fc 01       	movw	r30, r24
    2080:	ee 57       	subi	r30, 0x7E	; 126
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	80 81       	ld	r24, Z
    2086:	82 95       	swap	r24
    2088:	8f 70       	andi	r24, 0x0F	; 15
    208a:	81 70       	andi	r24, 0x01	; 1
    208c:	88 2f       	mov	r24, r24
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	82 95       	swap	r24
    2096:	92 95       	swap	r25
    2098:	90 7f       	andi	r25, 0xF0	; 240
    209a:	98 27       	eor	r25, r24
    209c:	80 7f       	andi	r24, 0xF0	; 240
    209e:	98 27       	eor	r25, r24
    20a0:	48 2b       	or	r20, r24
    20a2:	fe 01       	movw	r30, r28
    20a4:	e2 57       	subi	r30, 0x72	; 114
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	80 81       	ld	r24, Z
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	c9 01       	movw	r24, r18
    20b0:	88 0f       	add	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	82 0f       	add	r24, r18
    20b6:	93 1f       	adc	r25, r19
    20b8:	88 0f       	add	r24, r24
    20ba:	99 1f       	adc	r25, r25
    20bc:	88 0f       	add	r24, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	fc 01       	movw	r30, r24
    20c2:	ee 57       	subi	r30, 0x7E	; 126
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	80 81       	ld	r24, Z
    20c8:	82 95       	swap	r24
    20ca:	86 95       	lsr	r24
    20cc:	87 70       	andi	r24, 0x07	; 7
    20ce:	81 70       	andi	r24, 0x01	; 1
    20d0:	88 2f       	mov	r24, r24
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	82 95       	swap	r24
    20d6:	92 95       	swap	r25
    20d8:	90 7f       	andi	r25, 0xF0	; 240
    20da:	98 27       	eor	r25, r24
    20dc:	80 7f       	andi	r24, 0xF0	; 240
    20de:	98 27       	eor	r25, r24
    20e0:	84 2b       	or	r24, r20
    20e2:	fe 01       	movw	r30, r28
    20e4:	e3 57       	subi	r30, 0x73	; 115
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	80 83       	st	Z, r24
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8DisplayState     << 6 )|
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CursorState      << 5 )|
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CursorBlinkState << 4 );			
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    20ea:	fe 01       	movw	r30, r28
    20ec:	e2 57       	subi	r30, 0x72	; 114
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	de 01       	movw	r26, r28
    20f2:	a3 57       	subi	r26, 0x73	; 115
    20f4:	bf 4f       	sbci	r27, 0xFF	; 255
    20f6:	80 81       	ld	r24, Z
    20f8:	6c 91       	ld	r22, X
    20fa:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <voidWriteCmd>
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	a0 e8       	ldi	r26, 0x80	; 128
    2104:	bf e3       	ldi	r27, 0x3F	; 63
    2106:	8f a3       	std	Y+39, r24	; 0x27
    2108:	98 a7       	std	Y+40, r25	; 0x28
    210a:	a9 a7       	std	Y+41, r26	; 0x29
    210c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210e:	6f a1       	ldd	r22, Y+39	; 0x27
    2110:	78 a5       	ldd	r23, Y+40	; 0x28
    2112:	89 a5       	ldd	r24, Y+41	; 0x29
    2114:	9a a5       	ldd	r25, Y+42	; 0x2a
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	4a ef       	ldi	r20, 0xFA	; 250
    211c:	54 e4       	ldi	r21, 0x44	; 68
    211e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	8b a3       	std	Y+35, r24	; 0x23
    2128:	9c a3       	std	Y+36, r25	; 0x24
    212a:	ad a3       	std	Y+37, r26	; 0x25
    212c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    212e:	6b a1       	ldd	r22, Y+35	; 0x23
    2130:	7c a1       	ldd	r23, Y+36	; 0x24
    2132:	8d a1       	ldd	r24, Y+37	; 0x25
    2134:	9e a1       	ldd	r25, Y+38	; 0x26
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e8       	ldi	r20, 0x80	; 128
    213c:	5f e3       	ldi	r21, 0x3F	; 63
    213e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2142:	88 23       	and	r24, r24
    2144:	2c f4       	brge	.+10     	; 0x2150 <LCD_voidInit+0xd3a>
		__ticks = 1;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	9a a3       	std	Y+34, r25	; 0x22
    214c:	89 a3       	std	Y+33, r24	; 0x21
    214e:	3f c0       	rjmp	.+126    	; 0x21ce <LCD_voidInit+0xdb8>
	else if (__tmp > 65535)
    2150:	6b a1       	ldd	r22, Y+35	; 0x23
    2152:	7c a1       	ldd	r23, Y+36	; 0x24
    2154:	8d a1       	ldd	r24, Y+37	; 0x25
    2156:	9e a1       	ldd	r25, Y+38	; 0x26
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	3f ef       	ldi	r19, 0xFF	; 255
    215c:	4f e7       	ldi	r20, 0x7F	; 127
    215e:	57 e4       	ldi	r21, 0x47	; 71
    2160:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2164:	18 16       	cp	r1, r24
    2166:	4c f5       	brge	.+82     	; 0x21ba <LCD_voidInit+0xda4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2168:	6f a1       	ldd	r22, Y+39	; 0x27
    216a:	78 a5       	ldd	r23, Y+40	; 0x28
    216c:	89 a5       	ldd	r24, Y+41	; 0x29
    216e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e2       	ldi	r20, 0x20	; 32
    2176:	51 e4       	ldi	r21, 0x41	; 65
    2178:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	bc 01       	movw	r22, r24
    2182:	cd 01       	movw	r24, r26
    2184:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	9a a3       	std	Y+34, r25	; 0x22
    218e:	89 a3       	std	Y+33, r24	; 0x21
    2190:	0f c0       	rjmp	.+30     	; 0x21b0 <LCD_voidInit+0xd9a>
    2192:	88 ec       	ldi	r24, 0xC8	; 200
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	98 a3       	std	Y+32, r25	; 0x20
    2198:	8f 8f       	std	Y+31, r24	; 0x1f
    219a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    219c:	98 a1       	ldd	r25, Y+32	; 0x20
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <LCD_voidInit+0xd88>
    21a2:	98 a3       	std	Y+32, r25	; 0x20
    21a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a6:	89 a1       	ldd	r24, Y+33	; 0x21
    21a8:	9a a1       	ldd	r25, Y+34	; 0x22
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	9a a3       	std	Y+34, r25	; 0x22
    21ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b0:	89 a1       	ldd	r24, Y+33	; 0x21
    21b2:	9a a1       	ldd	r25, Y+34	; 0x22
    21b4:	00 97       	sbiw	r24, 0x00	; 0
    21b6:	69 f7       	brne	.-38     	; 0x2192 <LCD_voidInit+0xd7c>
    21b8:	14 c0       	rjmp	.+40     	; 0x21e2 <LCD_voidInit+0xdcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ba:	6b a1       	ldd	r22, Y+35	; 0x23
    21bc:	7c a1       	ldd	r23, Y+36	; 0x24
    21be:	8d a1       	ldd	r24, Y+37	; 0x25
    21c0:	9e a1       	ldd	r25, Y+38	; 0x26
    21c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	9a a3       	std	Y+34, r25	; 0x22
    21cc:	89 a3       	std	Y+33, r24	; 0x21
    21ce:	89 a1       	ldd	r24, Y+33	; 0x21
    21d0:	9a a1       	ldd	r25, Y+34	; 0x22
    21d2:	9e 8f       	std	Y+30, r25	; 0x1e
    21d4:	8d 8f       	std	Y+29, r24	; 0x1d
    21d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	f1 f7       	brne	.-4      	; 0x21da <LCD_voidInit+0xdc4>
    21de:	9e 8f       	std	Y+30, r25	; 0x1e
    21e0:	8d 8f       	std	Y+29, r24	; 0x1d
			/* Step 5 */
			_delay_ms(1);
			/* Step 6 */
			voidWriteCmd(u8CntrLoc , 0b00000000);
    21e2:	fe 01       	movw	r30, r28
    21e4:	e2 57       	subi	r30, 0x72	; 114
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	80 81       	ld	r24, Z
    21ea:	60 e0       	ldi	r22, 0x00	; 0
    21ec:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <voidWriteCmd>
			voidWriteCmd(u8CntrLoc , 0b00010000);
    21f0:	fe 01       	movw	r30, r28
    21f2:	e2 57       	subi	r30, 0x72	; 114
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	80 81       	ld	r24, Z
    21f8:	60 e1       	ldi	r22, 0x10	; 16
    21fa:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <voidWriteCmd>
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	a0 e4       	ldi	r26, 0x40	; 64
    2204:	b0 e4       	ldi	r27, 0x40	; 64
    2206:	89 8f       	std	Y+25, r24	; 0x19
    2208:	9a 8f       	std	Y+26, r25	; 0x1a
    220a:	ab 8f       	std	Y+27, r26	; 0x1b
    220c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220e:	69 8d       	ldd	r22, Y+25	; 0x19
    2210:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2212:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2214:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	4a ef       	ldi	r20, 0xFA	; 250
    221c:	54 e4       	ldi	r21, 0x44	; 68
    221e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	8d 8b       	std	Y+21, r24	; 0x15
    2228:	9e 8b       	std	Y+22, r25	; 0x16
    222a:	af 8b       	std	Y+23, r26	; 0x17
    222c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    222e:	6d 89       	ldd	r22, Y+21	; 0x15
    2230:	7e 89       	ldd	r23, Y+22	; 0x16
    2232:	8f 89       	ldd	r24, Y+23	; 0x17
    2234:	98 8d       	ldd	r25, Y+24	; 0x18
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e8       	ldi	r20, 0x80	; 128
    223c:	5f e3       	ldi	r21, 0x3F	; 63
    223e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2242:	88 23       	and	r24, r24
    2244:	2c f4       	brge	.+10     	; 0x2250 <LCD_voidInit+0xe3a>
		__ticks = 1;
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	9c 8b       	std	Y+20, r25	; 0x14
    224c:	8b 8b       	std	Y+19, r24	; 0x13
    224e:	3f c0       	rjmp	.+126    	; 0x22ce <LCD_voidInit+0xeb8>
	else if (__tmp > 65535)
    2250:	6d 89       	ldd	r22, Y+21	; 0x15
    2252:	7e 89       	ldd	r23, Y+22	; 0x16
    2254:	8f 89       	ldd	r24, Y+23	; 0x17
    2256:	98 8d       	ldd	r25, Y+24	; 0x18
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	3f ef       	ldi	r19, 0xFF	; 255
    225c:	4f e7       	ldi	r20, 0x7F	; 127
    225e:	57 e4       	ldi	r21, 0x47	; 71
    2260:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2264:	18 16       	cp	r1, r24
    2266:	4c f5       	brge	.+82     	; 0x22ba <LCD_voidInit+0xea4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2268:	69 8d       	ldd	r22, Y+25	; 0x19
    226a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    226c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    226e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e2       	ldi	r20, 0x20	; 32
    2276:	51 e4       	ldi	r21, 0x41	; 65
    2278:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	bc 01       	movw	r22, r24
    2282:	cd 01       	movw	r24, r26
    2284:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	9c 8b       	std	Y+20, r25	; 0x14
    228e:	8b 8b       	std	Y+19, r24	; 0x13
    2290:	0f c0       	rjmp	.+30     	; 0x22b0 <LCD_voidInit+0xe9a>
    2292:	88 ec       	ldi	r24, 0xC8	; 200
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	9a 8b       	std	Y+18, r25	; 0x12
    2298:	89 8b       	std	Y+17, r24	; 0x11
    229a:	89 89       	ldd	r24, Y+17	; 0x11
    229c:	9a 89       	ldd	r25, Y+18	; 0x12
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <LCD_voidInit+0xe88>
    22a2:	9a 8b       	std	Y+18, r25	; 0x12
    22a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a6:	8b 89       	ldd	r24, Y+19	; 0x13
    22a8:	9c 89       	ldd	r25, Y+20	; 0x14
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	9c 8b       	std	Y+20, r25	; 0x14
    22ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b0:	8b 89       	ldd	r24, Y+19	; 0x13
    22b2:	9c 89       	ldd	r25, Y+20	; 0x14
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	69 f7       	brne	.-38     	; 0x2292 <LCD_voidInit+0xe7c>
    22b8:	14 c0       	rjmp	.+40     	; 0x22e2 <LCD_voidInit+0xecc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ba:	6d 89       	ldd	r22, Y+21	; 0x15
    22bc:	7e 89       	ldd	r23, Y+22	; 0x16
    22be:	8f 89       	ldd	r24, Y+23	; 0x17
    22c0:	98 8d       	ldd	r25, Y+24	; 0x18
    22c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	9c 8b       	std	Y+20, r25	; 0x14
    22cc:	8b 8b       	std	Y+19, r24	; 0x13
    22ce:	8b 89       	ldd	r24, Y+19	; 0x13
    22d0:	9c 89       	ldd	r25, Y+20	; 0x14
    22d2:	98 8b       	std	Y+16, r25	; 0x10
    22d4:	8f 87       	std	Y+15, r24	; 0x0f
    22d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d8:	98 89       	ldd	r25, Y+16	; 0x10
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <LCD_voidInit+0xec4>
    22de:	98 8b       	std	Y+16, r25	; 0x10
    22e0:	8f 87       	std	Y+15, r24	; 0x0f
			/* Step 7 */
			_delay_ms(3);
			/* Step 8 */
			voidWriteCmd(u8CntrLoc , 0b00000000);
    22e2:	fe 01       	movw	r30, r28
    22e4:	e2 57       	subi	r30, 0x72	; 114
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	80 81       	ld	r24, Z
    22ea:	60 e0       	ldi	r22, 0x00	; 0
    22ec:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <voidWriteCmd>
			u8CmdLoc =   (0b01000000) |
    22f0:	fe 01       	movw	r30, r28
    22f2:	e2 57       	subi	r30, 0x72	; 114
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	80 81       	ld	r24, Z
    22f8:	28 2f       	mov	r18, r24
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	c9 01       	movw	r24, r18
    22fe:	88 0f       	add	r24, r24
    2300:	99 1f       	adc	r25, r25
    2302:	82 0f       	add	r24, r18
    2304:	93 1f       	adc	r25, r19
    2306:	88 0f       	add	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	88 0f       	add	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	fc 01       	movw	r30, r24
    2310:	ee 57       	subi	r30, 0x7E	; 126
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	80 81       	ld	r24, Z
    2316:	82 95       	swap	r24
    2318:	86 95       	lsr	r24
    231a:	86 95       	lsr	r24
    231c:	83 70       	andi	r24, 0x03	; 3
    231e:	81 70       	andi	r24, 0x01	; 1
    2320:	88 2f       	mov	r24, r24
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	88 0f       	add	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	82 95       	swap	r24
    232a:	92 95       	swap	r25
    232c:	90 7f       	andi	r25, 0xF0	; 240
    232e:	98 27       	eor	r25, r24
    2330:	80 7f       	andi	r24, 0xF0	; 240
    2332:	98 27       	eor	r25, r24
    2334:	48 2f       	mov	r20, r24
    2336:	40 64       	ori	r20, 0x40	; 64
    2338:	fe 01       	movw	r30, r28
    233a:	e2 57       	subi	r30, 0x72	; 114
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	80 81       	ld	r24, Z
    2340:	28 2f       	mov	r18, r24
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	c9 01       	movw	r24, r18
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	82 0f       	add	r24, r18
    234c:	93 1f       	adc	r25, r19
    234e:	88 0f       	add	r24, r24
    2350:	99 1f       	adc	r25, r25
    2352:	88 0f       	add	r24, r24
    2354:	99 1f       	adc	r25, r25
    2356:	fc 01       	movw	r30, r24
    2358:	ee 57       	subi	r30, 0x7E	; 126
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	80 81       	ld	r24, Z
    235e:	88 1f       	adc	r24, r24
    2360:	88 27       	eor	r24, r24
    2362:	88 1f       	adc	r24, r24
    2364:	88 2f       	mov	r24, r24
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	82 95       	swap	r24
    236a:	92 95       	swap	r25
    236c:	90 7f       	andi	r25, 0xF0	; 240
    236e:	98 27       	eor	r25, r24
    2370:	80 7f       	andi	r24, 0xF0	; 240
    2372:	98 27       	eor	r25, r24
    2374:	84 2b       	or	r24, r20
    2376:	fe 01       	movw	r30, r28
    2378:	e3 57       	subi	r30, 0x73	; 115
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8IncrementMode  << 5 )|
            (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8ShiftMode      << 4 );
                        
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    237e:	fe 01       	movw	r30, r28
    2380:	e2 57       	subi	r30, 0x72	; 114
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	de 01       	movw	r26, r28
    2386:	a3 57       	subi	r26, 0x73	; 115
    2388:	bf 4f       	sbci	r27, 0xFF	; 255
    238a:	80 81       	ld	r24, Z
    238c:	6c 91       	ld	r22, X
    238e:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <voidWriteCmd>
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	a0 e4       	ldi	r26, 0x40	; 64
    2398:	b0 e4       	ldi	r27, 0x40	; 64
    239a:	8b 87       	std	Y+11, r24	; 0x0b
    239c:	9c 87       	std	Y+12, r25	; 0x0c
    239e:	ad 87       	std	Y+13, r26	; 0x0d
    23a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	4a ef       	ldi	r20, 0xFA	; 250
    23b0:	54 e4       	ldi	r21, 0x44	; 68
    23b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	8f 83       	std	Y+7, r24	; 0x07
    23bc:	98 87       	std	Y+8, r25	; 0x08
    23be:	a9 87       	std	Y+9, r26	; 0x09
    23c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23c2:	6f 81       	ldd	r22, Y+7	; 0x07
    23c4:	78 85       	ldd	r23, Y+8	; 0x08
    23c6:	89 85       	ldd	r24, Y+9	; 0x09
    23c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e8       	ldi	r20, 0x80	; 128
    23d0:	5f e3       	ldi	r21, 0x3F	; 63
    23d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23d6:	88 23       	and	r24, r24
    23d8:	2c f4       	brge	.+10     	; 0x23e4 <LCD_voidInit+0xfce>
		__ticks = 1;
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	9e 83       	std	Y+6, r25	; 0x06
    23e0:	8d 83       	std	Y+5, r24	; 0x05
    23e2:	3f c0       	rjmp	.+126    	; 0x2462 <LCD_voidInit+0x104c>
	else if (__tmp > 65535)
    23e4:	6f 81       	ldd	r22, Y+7	; 0x07
    23e6:	78 85       	ldd	r23, Y+8	; 0x08
    23e8:	89 85       	ldd	r24, Y+9	; 0x09
    23ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	3f ef       	ldi	r19, 0xFF	; 255
    23f0:	4f e7       	ldi	r20, 0x7F	; 127
    23f2:	57 e4       	ldi	r21, 0x47	; 71
    23f4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23f8:	18 16       	cp	r1, r24
    23fa:	4c f5       	brge	.+82     	; 0x244e <LCD_voidInit+0x1038>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2400:	8d 85       	ldd	r24, Y+13	; 0x0d
    2402:	9e 85       	ldd	r25, Y+14	; 0x0e
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e2       	ldi	r20, 0x20	; 32
    240a:	51 e4       	ldi	r21, 0x41	; 65
    240c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	bc 01       	movw	r22, r24
    2416:	cd 01       	movw	r24, r26
    2418:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	9e 83       	std	Y+6, r25	; 0x06
    2422:	8d 83       	std	Y+5, r24	; 0x05
    2424:	0f c0       	rjmp	.+30     	; 0x2444 <LCD_voidInit+0x102e>
    2426:	88 ec       	ldi	r24, 0xC8	; 200
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	9c 83       	std	Y+4, r25	; 0x04
    242c:	8b 83       	std	Y+3, r24	; 0x03
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	9c 81       	ldd	r25, Y+4	; 0x04
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	f1 f7       	brne	.-4      	; 0x2432 <LCD_voidInit+0x101c>
    2436:	9c 83       	std	Y+4, r25	; 0x04
    2438:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243a:	8d 81       	ldd	r24, Y+5	; 0x05
    243c:	9e 81       	ldd	r25, Y+6	; 0x06
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	9e 83       	std	Y+6, r25	; 0x06
    2442:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2444:	8d 81       	ldd	r24, Y+5	; 0x05
    2446:	9e 81       	ldd	r25, Y+6	; 0x06
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	69 f7       	brne	.-38     	; 0x2426 <LCD_voidInit+0x1010>
    244c:	14 c0       	rjmp	.+40     	; 0x2476 <LCD_voidInit+0x1060>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244e:	6f 81       	ldd	r22, Y+7	; 0x07
    2450:	78 85       	ldd	r23, Y+8	; 0x08
    2452:	89 85       	ldd	r24, Y+9	; 0x09
    2454:	9a 85       	ldd	r25, Y+10	; 0x0a
    2456:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	9e 83       	std	Y+6, r25	; 0x06
    2460:	8d 83       	std	Y+5, r24	; 0x05
    2462:	8d 81       	ldd	r24, Y+5	; 0x05
    2464:	9e 81       	ldd	r25, Y+6	; 0x06
    2466:	9a 83       	std	Y+2, r25	; 0x02
    2468:	89 83       	std	Y+1, r24	; 0x01
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	9a 81       	ldd	r25, Y+2	; 0x02
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	f1 f7       	brne	.-4      	; 0x246e <LCD_voidInit+0x1058>
    2472:	9a 83       	std	Y+2, r25	; 0x02
    2474:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidInit(void)
{
	uint8 u8CntrLoc = 0 ;
	uint8 u8CmdLoc  = 0 ;
	for ( u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc ++)
    2476:	de 01       	movw	r26, r28
    2478:	a2 57       	subi	r26, 0x72	; 114
    247a:	bf 4f       	sbci	r27, 0xFF	; 255
    247c:	fe 01       	movw	r30, r28
    247e:	e2 57       	subi	r30, 0x72	; 114
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	80 81       	ld	r24, Z
    2484:	8f 5f       	subi	r24, 0xFF	; 255
    2486:	8c 93       	st	X, r24
    2488:	fe 01       	movw	r30, r28
    248a:	e2 57       	subi	r30, 0x72	; 114
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 81       	ld	r24, Z
    2490:	88 23       	and	r24, r24
    2492:	11 f4       	brne	.+4      	; 0x2498 <LCD_voidInit+0x1082>
    2494:	0c 94 26 0a 	jmp	0x144c	; 0x144c <LCD_voidInit+0x36>
			_delay_ms(3);
		}
	}
	
	
}
    2498:	c2 57       	subi	r28, 0x72	; 114
    249a:	df 4f       	sbci	r29, 0xFF	; 255
    249c:	0f b6       	in	r0, 0x3f	; 63
    249e:	f8 94       	cli
    24a0:	de bf       	out	0x3e, r29	; 62
    24a2:	0f be       	out	0x3f, r0	; 63
    24a4:	cd bf       	out	0x3d, r28	; 61
    24a6:	cf 91       	pop	r28
    24a8:	df 91       	pop	r29
    24aa:	1f 91       	pop	r17
    24ac:	0f 91       	pop	r16
    24ae:	08 95       	ret

000024b0 <LCD_voidWriteCmd>:

void LCD_voidWriteCmd(uint8 u8LcdIndxCpy , uint8 u8CmdCpy)
{
    24b0:	df 93       	push	r29
    24b2:	cf 93       	push	r28
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
    24b8:	ac 97       	sbiw	r28, 0x2c	; 44
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	f8 94       	cli
    24be:	de bf       	out	0x3e, r29	; 62
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	cd bf       	out	0x3d, r28	; 61
    24c4:	8b a7       	std	Y+43, r24	; 0x2b
    24c6:	6c a7       	std	Y+44, r22	; 0x2c
	if (LCD_astrConfigSet[u8LcdIndxCpy].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
    24c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    24ca:	28 2f       	mov	r18, r24
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	c9 01       	movw	r24, r18
    24d0:	88 0f       	add	r24, r24
    24d2:	99 1f       	adc	r25, r25
    24d4:	82 0f       	add	r24, r18
    24d6:	93 1f       	adc	r25, r19
    24d8:	88 0f       	add	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	88 0f       	add	r24, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	fc 01       	movw	r30, r24
    24e2:	ee 57       	subi	r30, 0x7E	; 126
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	80 81       	ld	r24, Z
    24e8:	81 70       	andi	r24, 0x01	; 1
    24ea:	81 30       	cpi	r24, 0x01	; 1
    24ec:	09 f0       	breq	.+2      	; 0x24f0 <LCD_voidWriteCmd+0x40>
    24ee:	77 c0       	rjmp	.+238    	; 0x25de <LCD_voidWriteCmd+0x12e>
	{
		voidWriteCmd(u8LcdIndxCpy ,u8CmdCpy );
    24f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    24f2:	6c a5       	ldd	r22, Y+44	; 0x2c
    24f4:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <voidWriteCmd>
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	a0 e8       	ldi	r26, 0x80	; 128
    24fe:	bf e3       	ldi	r27, 0x3F	; 63
    2500:	8f a3       	std	Y+39, r24	; 0x27
    2502:	98 a7       	std	Y+40, r25	; 0x28
    2504:	a9 a7       	std	Y+41, r26	; 0x29
    2506:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2508:	6f a1       	ldd	r22, Y+39	; 0x27
    250a:	78 a5       	ldd	r23, Y+40	; 0x28
    250c:	89 a5       	ldd	r24, Y+41	; 0x29
    250e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	4a ef       	ldi	r20, 0xFA	; 250
    2516:	54 e4       	ldi	r21, 0x44	; 68
    2518:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	8b a3       	std	Y+35, r24	; 0x23
    2522:	9c a3       	std	Y+36, r25	; 0x24
    2524:	ad a3       	std	Y+37, r26	; 0x25
    2526:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2528:	6b a1       	ldd	r22, Y+35	; 0x23
    252a:	7c a1       	ldd	r23, Y+36	; 0x24
    252c:	8d a1       	ldd	r24, Y+37	; 0x25
    252e:	9e a1       	ldd	r25, Y+38	; 0x26
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e8       	ldi	r20, 0x80	; 128
    2536:	5f e3       	ldi	r21, 0x3F	; 63
    2538:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    253c:	88 23       	and	r24, r24
    253e:	2c f4       	brge	.+10     	; 0x254a <LCD_voidWriteCmd+0x9a>
		__ticks = 1;
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	9a a3       	std	Y+34, r25	; 0x22
    2546:	89 a3       	std	Y+33, r24	; 0x21
    2548:	3f c0       	rjmp	.+126    	; 0x25c8 <LCD_voidWriteCmd+0x118>
	else if (__tmp > 65535)
    254a:	6b a1       	ldd	r22, Y+35	; 0x23
    254c:	7c a1       	ldd	r23, Y+36	; 0x24
    254e:	8d a1       	ldd	r24, Y+37	; 0x25
    2550:	9e a1       	ldd	r25, Y+38	; 0x26
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	3f ef       	ldi	r19, 0xFF	; 255
    2556:	4f e7       	ldi	r20, 0x7F	; 127
    2558:	57 e4       	ldi	r21, 0x47	; 71
    255a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    255e:	18 16       	cp	r1, r24
    2560:	4c f5       	brge	.+82     	; 0x25b4 <LCD_voidWriteCmd+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2562:	6f a1       	ldd	r22, Y+39	; 0x27
    2564:	78 a5       	ldd	r23, Y+40	; 0x28
    2566:	89 a5       	ldd	r24, Y+41	; 0x29
    2568:	9a a5       	ldd	r25, Y+42	; 0x2a
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e2       	ldi	r20, 0x20	; 32
    2570:	51 e4       	ldi	r21, 0x41	; 65
    2572:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	bc 01       	movw	r22, r24
    257c:	cd 01       	movw	r24, r26
    257e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	9a a3       	std	Y+34, r25	; 0x22
    2588:	89 a3       	std	Y+33, r24	; 0x21
    258a:	0f c0       	rjmp	.+30     	; 0x25aa <LCD_voidWriteCmd+0xfa>
    258c:	88 ec       	ldi	r24, 0xC8	; 200
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	98 a3       	std	Y+32, r25	; 0x20
    2592:	8f 8f       	std	Y+31, r24	; 0x1f
    2594:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2596:	98 a1       	ldd	r25, Y+32	; 0x20
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	f1 f7       	brne	.-4      	; 0x2598 <LCD_voidWriteCmd+0xe8>
    259c:	98 a3       	std	Y+32, r25	; 0x20
    259e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a0:	89 a1       	ldd	r24, Y+33	; 0x21
    25a2:	9a a1       	ldd	r25, Y+34	; 0x22
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	9a a3       	std	Y+34, r25	; 0x22
    25a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25aa:	89 a1       	ldd	r24, Y+33	; 0x21
    25ac:	9a a1       	ldd	r25, Y+34	; 0x22
    25ae:	00 97       	sbiw	r24, 0x00	; 0
    25b0:	69 f7       	brne	.-38     	; 0x258c <LCD_voidWriteCmd+0xdc>
    25b2:	05 c1       	rjmp	.+522    	; 0x27be <LCD_voidWriteCmd+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b4:	6b a1       	ldd	r22, Y+35	; 0x23
    25b6:	7c a1       	ldd	r23, Y+36	; 0x24
    25b8:	8d a1       	ldd	r24, Y+37	; 0x25
    25ba:	9e a1       	ldd	r25, Y+38	; 0x26
    25bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	9a a3       	std	Y+34, r25	; 0x22
    25c6:	89 a3       	std	Y+33, r24	; 0x21
    25c8:	89 a1       	ldd	r24, Y+33	; 0x21
    25ca:	9a a1       	ldd	r25, Y+34	; 0x22
    25cc:	9e 8f       	std	Y+30, r25	; 0x1e
    25ce:	8d 8f       	std	Y+29, r24	; 0x1d
    25d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	f1 f7       	brne	.-4      	; 0x25d4 <LCD_voidWriteCmd+0x124>
    25d8:	9e 8f       	std	Y+30, r25	; 0x1e
    25da:	8d 8f       	std	Y+29, r24	; 0x1d
    25dc:	f0 c0       	rjmp	.+480    	; 0x27be <LCD_voidWriteCmd+0x30e>
		_delay_ms(1);
	}
	else
	{
		voidWriteCmd(u8LcdIndxCpy ,u8CmdCpy);  
    25de:	8b a5       	ldd	r24, Y+43	; 0x2b
    25e0:	6c a5       	ldd	r22, Y+44	; 0x2c
    25e2:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <voidWriteCmd>
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	a0 e8       	ldi	r26, 0x80	; 128
    25ec:	bf e3       	ldi	r27, 0x3F	; 63
    25ee:	89 8f       	std	Y+25, r24	; 0x19
    25f0:	9a 8f       	std	Y+26, r25	; 0x1a
    25f2:	ab 8f       	std	Y+27, r26	; 0x1b
    25f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f6:	69 8d       	ldd	r22, Y+25	; 0x19
    25f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	4a ef       	ldi	r20, 0xFA	; 250
    2604:	54 e4       	ldi	r21, 0x44	; 68
    2606:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	8d 8b       	std	Y+21, r24	; 0x15
    2610:	9e 8b       	std	Y+22, r25	; 0x16
    2612:	af 8b       	std	Y+23, r26	; 0x17
    2614:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2616:	6d 89       	ldd	r22, Y+21	; 0x15
    2618:	7e 89       	ldd	r23, Y+22	; 0x16
    261a:	8f 89       	ldd	r24, Y+23	; 0x17
    261c:	98 8d       	ldd	r25, Y+24	; 0x18
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e8       	ldi	r20, 0x80	; 128
    2624:	5f e3       	ldi	r21, 0x3F	; 63
    2626:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    262a:	88 23       	and	r24, r24
    262c:	2c f4       	brge	.+10     	; 0x2638 <LCD_voidWriteCmd+0x188>
		__ticks = 1;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	9c 8b       	std	Y+20, r25	; 0x14
    2634:	8b 8b       	std	Y+19, r24	; 0x13
    2636:	3f c0       	rjmp	.+126    	; 0x26b6 <LCD_voidWriteCmd+0x206>
	else if (__tmp > 65535)
    2638:	6d 89       	ldd	r22, Y+21	; 0x15
    263a:	7e 89       	ldd	r23, Y+22	; 0x16
    263c:	8f 89       	ldd	r24, Y+23	; 0x17
    263e:	98 8d       	ldd	r25, Y+24	; 0x18
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	3f ef       	ldi	r19, 0xFF	; 255
    2644:	4f e7       	ldi	r20, 0x7F	; 127
    2646:	57 e4       	ldi	r21, 0x47	; 71
    2648:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    264c:	18 16       	cp	r1, r24
    264e:	4c f5       	brge	.+82     	; 0x26a2 <LCD_voidWriteCmd+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2650:	69 8d       	ldd	r22, Y+25	; 0x19
    2652:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2654:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2656:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e2       	ldi	r20, 0x20	; 32
    265e:	51 e4       	ldi	r21, 0x41	; 65
    2660:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	bc 01       	movw	r22, r24
    266a:	cd 01       	movw	r24, r26
    266c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	9c 8b       	std	Y+20, r25	; 0x14
    2676:	8b 8b       	std	Y+19, r24	; 0x13
    2678:	0f c0       	rjmp	.+30     	; 0x2698 <LCD_voidWriteCmd+0x1e8>
    267a:	88 ec       	ldi	r24, 0xC8	; 200
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	9a 8b       	std	Y+18, r25	; 0x12
    2680:	89 8b       	std	Y+17, r24	; 0x11
    2682:	89 89       	ldd	r24, Y+17	; 0x11
    2684:	9a 89       	ldd	r25, Y+18	; 0x12
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	f1 f7       	brne	.-4      	; 0x2686 <LCD_voidWriteCmd+0x1d6>
    268a:	9a 8b       	std	Y+18, r25	; 0x12
    268c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268e:	8b 89       	ldd	r24, Y+19	; 0x13
    2690:	9c 89       	ldd	r25, Y+20	; 0x14
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	9c 8b       	std	Y+20, r25	; 0x14
    2696:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2698:	8b 89       	ldd	r24, Y+19	; 0x13
    269a:	9c 89       	ldd	r25, Y+20	; 0x14
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	69 f7       	brne	.-38     	; 0x267a <LCD_voidWriteCmd+0x1ca>
    26a0:	14 c0       	rjmp	.+40     	; 0x26ca <LCD_voidWriteCmd+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a2:	6d 89       	ldd	r22, Y+21	; 0x15
    26a4:	7e 89       	ldd	r23, Y+22	; 0x16
    26a6:	8f 89       	ldd	r24, Y+23	; 0x17
    26a8:	98 8d       	ldd	r25, Y+24	; 0x18
    26aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9c 8b       	std	Y+20, r25	; 0x14
    26b4:	8b 8b       	std	Y+19, r24	; 0x13
    26b6:	8b 89       	ldd	r24, Y+19	; 0x13
    26b8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ba:	98 8b       	std	Y+16, r25	; 0x10
    26bc:	8f 87       	std	Y+15, r24	; 0x0f
    26be:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c0:	98 89       	ldd	r25, Y+16	; 0x10
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <LCD_voidWriteCmd+0x212>
    26c6:	98 8b       	std	Y+16, r25	; 0x10
    26c8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		voidWriteCmd(u8LcdIndxCpy ,u8CmdCpy<<4);
    26ca:	8c a5       	ldd	r24, Y+44	; 0x2c
    26cc:	98 2f       	mov	r25, r24
    26ce:	92 95       	swap	r25
    26d0:	90 7f       	andi	r25, 0xF0	; 240
    26d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    26d4:	69 2f       	mov	r22, r25
    26d6:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <voidWriteCmd>
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	a0 e8       	ldi	r26, 0x80	; 128
    26e0:	bf e3       	ldi	r27, 0x3F	; 63
    26e2:	8b 87       	std	Y+11, r24	; 0x0b
    26e4:	9c 87       	std	Y+12, r25	; 0x0c
    26e6:	ad 87       	std	Y+13, r26	; 0x0d
    26e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	4a ef       	ldi	r20, 0xFA	; 250
    26f8:	54 e4       	ldi	r21, 0x44	; 68
    26fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	8f 83       	std	Y+7, r24	; 0x07
    2704:	98 87       	std	Y+8, r25	; 0x08
    2706:	a9 87       	std	Y+9, r26	; 0x09
    2708:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    270a:	6f 81       	ldd	r22, Y+7	; 0x07
    270c:	78 85       	ldd	r23, Y+8	; 0x08
    270e:	89 85       	ldd	r24, Y+9	; 0x09
    2710:	9a 85       	ldd	r25, Y+10	; 0x0a
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	40 e8       	ldi	r20, 0x80	; 128
    2718:	5f e3       	ldi	r21, 0x3F	; 63
    271a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    271e:	88 23       	and	r24, r24
    2720:	2c f4       	brge	.+10     	; 0x272c <LCD_voidWriteCmd+0x27c>
		__ticks = 1;
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	9e 83       	std	Y+6, r25	; 0x06
    2728:	8d 83       	std	Y+5, r24	; 0x05
    272a:	3f c0       	rjmp	.+126    	; 0x27aa <LCD_voidWriteCmd+0x2fa>
	else if (__tmp > 65535)
    272c:	6f 81       	ldd	r22, Y+7	; 0x07
    272e:	78 85       	ldd	r23, Y+8	; 0x08
    2730:	89 85       	ldd	r24, Y+9	; 0x09
    2732:	9a 85       	ldd	r25, Y+10	; 0x0a
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	3f ef       	ldi	r19, 0xFF	; 255
    2738:	4f e7       	ldi	r20, 0x7F	; 127
    273a:	57 e4       	ldi	r21, 0x47	; 71
    273c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2740:	18 16       	cp	r1, r24
    2742:	4c f5       	brge	.+82     	; 0x2796 <LCD_voidWriteCmd+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2744:	6b 85       	ldd	r22, Y+11	; 0x0b
    2746:	7c 85       	ldd	r23, Y+12	; 0x0c
    2748:	8d 85       	ldd	r24, Y+13	; 0x0d
    274a:	9e 85       	ldd	r25, Y+14	; 0x0e
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	40 e2       	ldi	r20, 0x20	; 32
    2752:	51 e4       	ldi	r21, 0x41	; 65
    2754:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	bc 01       	movw	r22, r24
    275e:	cd 01       	movw	r24, r26
    2760:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	9e 83       	std	Y+6, r25	; 0x06
    276a:	8d 83       	std	Y+5, r24	; 0x05
    276c:	0f c0       	rjmp	.+30     	; 0x278c <LCD_voidWriteCmd+0x2dc>
    276e:	88 ec       	ldi	r24, 0xC8	; 200
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9c 83       	std	Y+4, r25	; 0x04
    2774:	8b 83       	std	Y+3, r24	; 0x03
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	9c 81       	ldd	r25, Y+4	; 0x04
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	f1 f7       	brne	.-4      	; 0x277a <LCD_voidWriteCmd+0x2ca>
    277e:	9c 83       	std	Y+4, r25	; 0x04
    2780:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2782:	8d 81       	ldd	r24, Y+5	; 0x05
    2784:	9e 81       	ldd	r25, Y+6	; 0x06
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	9e 83       	std	Y+6, r25	; 0x06
    278a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278c:	8d 81       	ldd	r24, Y+5	; 0x05
    278e:	9e 81       	ldd	r25, Y+6	; 0x06
    2790:	00 97       	sbiw	r24, 0x00	; 0
    2792:	69 f7       	brne	.-38     	; 0x276e <LCD_voidWriteCmd+0x2be>
    2794:	14 c0       	rjmp	.+40     	; 0x27be <LCD_voidWriteCmd+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2796:	6f 81       	ldd	r22, Y+7	; 0x07
    2798:	78 85       	ldd	r23, Y+8	; 0x08
    279a:	89 85       	ldd	r24, Y+9	; 0x09
    279c:	9a 85       	ldd	r25, Y+10	; 0x0a
    279e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	9e 83       	std	Y+6, r25	; 0x06
    27a8:	8d 83       	std	Y+5, r24	; 0x05
    27aa:	8d 81       	ldd	r24, Y+5	; 0x05
    27ac:	9e 81       	ldd	r25, Y+6	; 0x06
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	9a 81       	ldd	r25, Y+2	; 0x02
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	f1 f7       	brne	.-4      	; 0x27b6 <LCD_voidWriteCmd+0x306>
    27ba:	9a 83       	std	Y+2, r25	; 0x02
    27bc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
	
}
    27be:	ac 96       	adiw	r28, 0x2c	; 44
    27c0:	0f b6       	in	r0, 0x3f	; 63
    27c2:	f8 94       	cli
    27c4:	de bf       	out	0x3e, r29	; 62
    27c6:	0f be       	out	0x3f, r0	; 63
    27c8:	cd bf       	out	0x3d, r28	; 61
    27ca:	cf 91       	pop	r28
    27cc:	df 91       	pop	r29
    27ce:	08 95       	ret

000027d0 <LCD_voidDisplayChar>:

void LCD_voidDisplayChar(uint8 u8LcdIndxCpy , uint8 u8CharCpy)
{
    27d0:	df 93       	push	r29
    27d2:	cf 93       	push	r28
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
    27d8:	ac 97       	sbiw	r28, 0x2c	; 44
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	cd bf       	out	0x3d, r28	; 61
    27e4:	8b a7       	std	Y+43, r24	; 0x2b
    27e6:	6c a7       	std	Y+44, r22	; 0x2c
	// Rs  1
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Rs , DIO_HIGH );
    27e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    27ea:	28 2f       	mov	r18, r24
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	c9 01       	movw	r24, r18
    27f0:	88 0f       	add	r24, r24
    27f2:	99 1f       	adc	r25, r25
    27f4:	82 0f       	add	r24, r18
    27f6:	93 1f       	adc	r25, r19
    27f8:	88 0f       	add	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	88 0f       	add	r24, r24
    27fe:	99 1f       	adc	r25, r25
    2800:	fc 01       	movw	r30, r24
    2802:	ed 57       	subi	r30, 0x7D	; 125
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	80 81       	ld	r24, Z
    2808:	61 e0       	ldi	r22, 0x01	; 1
    280a:	0e 94 b2 05 	call	0xb64	; 0xb64 <DIO_enuWritePin>
	
	if (LCD_astrConfigSet[u8LcdIndxCpy].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
    280e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2810:	28 2f       	mov	r18, r24
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	c9 01       	movw	r24, r18
    2816:	88 0f       	add	r24, r24
    2818:	99 1f       	adc	r25, r25
    281a:	82 0f       	add	r24, r18
    281c:	93 1f       	adc	r25, r19
    281e:	88 0f       	add	r24, r24
    2820:	99 1f       	adc	r25, r25
    2822:	88 0f       	add	r24, r24
    2824:	99 1f       	adc	r25, r25
    2826:	fc 01       	movw	r30, r24
    2828:	ee 57       	subi	r30, 0x7E	; 126
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	80 81       	ld	r24, Z
    282e:	81 70       	andi	r24, 0x01	; 1
    2830:	81 30       	cpi	r24, 0x01	; 1
    2832:	09 f0       	breq	.+2      	; 0x2836 <LCD_voidDisplayChar+0x66>
    2834:	77 c0       	rjmp	.+238    	; 0x2924 <LCD_voidDisplayChar+0x154>
	{
		voidLcdHelper(u8LcdIndxCpy , u8CharCpy);
    2836:	8b a5       	ldd	r24, Y+43	; 0x2b
    2838:	6c a5       	ldd	r22, Y+44	; 0x2c
    283a:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <voidLcdHelper>
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	a0 e8       	ldi	r26, 0x80	; 128
    2844:	bf e3       	ldi	r27, 0x3F	; 63
    2846:	8f a3       	std	Y+39, r24	; 0x27
    2848:	98 a7       	std	Y+40, r25	; 0x28
    284a:	a9 a7       	std	Y+41, r26	; 0x29
    284c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284e:	6f a1       	ldd	r22, Y+39	; 0x27
    2850:	78 a5       	ldd	r23, Y+40	; 0x28
    2852:	89 a5       	ldd	r24, Y+41	; 0x29
    2854:	9a a5       	ldd	r25, Y+42	; 0x2a
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	4a ef       	ldi	r20, 0xFA	; 250
    285c:	54 e4       	ldi	r21, 0x44	; 68
    285e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	8b a3       	std	Y+35, r24	; 0x23
    2868:	9c a3       	std	Y+36, r25	; 0x24
    286a:	ad a3       	std	Y+37, r26	; 0x25
    286c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    286e:	6b a1       	ldd	r22, Y+35	; 0x23
    2870:	7c a1       	ldd	r23, Y+36	; 0x24
    2872:	8d a1       	ldd	r24, Y+37	; 0x25
    2874:	9e a1       	ldd	r25, Y+38	; 0x26
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e8       	ldi	r20, 0x80	; 128
    287c:	5f e3       	ldi	r21, 0x3F	; 63
    287e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2882:	88 23       	and	r24, r24
    2884:	2c f4       	brge	.+10     	; 0x2890 <LCD_voidDisplayChar+0xc0>
		__ticks = 1;
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	9a a3       	std	Y+34, r25	; 0x22
    288c:	89 a3       	std	Y+33, r24	; 0x21
    288e:	3f c0       	rjmp	.+126    	; 0x290e <LCD_voidDisplayChar+0x13e>
	else if (__tmp > 65535)
    2890:	6b a1       	ldd	r22, Y+35	; 0x23
    2892:	7c a1       	ldd	r23, Y+36	; 0x24
    2894:	8d a1       	ldd	r24, Y+37	; 0x25
    2896:	9e a1       	ldd	r25, Y+38	; 0x26
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	3f ef       	ldi	r19, 0xFF	; 255
    289c:	4f e7       	ldi	r20, 0x7F	; 127
    289e:	57 e4       	ldi	r21, 0x47	; 71
    28a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28a4:	18 16       	cp	r1, r24
    28a6:	4c f5       	brge	.+82     	; 0x28fa <LCD_voidDisplayChar+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a8:	6f a1       	ldd	r22, Y+39	; 0x27
    28aa:	78 a5       	ldd	r23, Y+40	; 0x28
    28ac:	89 a5       	ldd	r24, Y+41	; 0x29
    28ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e2       	ldi	r20, 0x20	; 32
    28b6:	51 e4       	ldi	r21, 0x41	; 65
    28b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	bc 01       	movw	r22, r24
    28c2:	cd 01       	movw	r24, r26
    28c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	9a a3       	std	Y+34, r25	; 0x22
    28ce:	89 a3       	std	Y+33, r24	; 0x21
    28d0:	0f c0       	rjmp	.+30     	; 0x28f0 <LCD_voidDisplayChar+0x120>
    28d2:	88 ec       	ldi	r24, 0xC8	; 200
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	98 a3       	std	Y+32, r25	; 0x20
    28d8:	8f 8f       	std	Y+31, r24	; 0x1f
    28da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28dc:	98 a1       	ldd	r25, Y+32	; 0x20
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	f1 f7       	brne	.-4      	; 0x28de <LCD_voidDisplayChar+0x10e>
    28e2:	98 a3       	std	Y+32, r25	; 0x20
    28e4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e6:	89 a1       	ldd	r24, Y+33	; 0x21
    28e8:	9a a1       	ldd	r25, Y+34	; 0x22
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	9a a3       	std	Y+34, r25	; 0x22
    28ee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f0:	89 a1       	ldd	r24, Y+33	; 0x21
    28f2:	9a a1       	ldd	r25, Y+34	; 0x22
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	69 f7       	brne	.-38     	; 0x28d2 <LCD_voidDisplayChar+0x102>
    28f8:	05 c1       	rjmp	.+522    	; 0x2b04 <LCD_voidDisplayChar+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fa:	6b a1       	ldd	r22, Y+35	; 0x23
    28fc:	7c a1       	ldd	r23, Y+36	; 0x24
    28fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2900:	9e a1       	ldd	r25, Y+38	; 0x26
    2902:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	9a a3       	std	Y+34, r25	; 0x22
    290c:	89 a3       	std	Y+33, r24	; 0x21
    290e:	89 a1       	ldd	r24, Y+33	; 0x21
    2910:	9a a1       	ldd	r25, Y+34	; 0x22
    2912:	9e 8f       	std	Y+30, r25	; 0x1e
    2914:	8d 8f       	std	Y+29, r24	; 0x1d
    2916:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2918:	9e 8d       	ldd	r25, Y+30	; 0x1e
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	f1 f7       	brne	.-4      	; 0x291a <LCD_voidDisplayChar+0x14a>
    291e:	9e 8f       	std	Y+30, r25	; 0x1e
    2920:	8d 8f       	std	Y+29, r24	; 0x1d
    2922:	f0 c0       	rjmp	.+480    	; 0x2b04 <LCD_voidDisplayChar+0x334>
		_delay_ms(1);
	}
	else
	{
		
		voidLcdHelper(u8LcdIndxCpy , u8CharCpy);  
    2924:	8b a5       	ldd	r24, Y+43	; 0x2b
    2926:	6c a5       	ldd	r22, Y+44	; 0x2c
    2928:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <voidLcdHelper>
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	a0 e8       	ldi	r26, 0x80	; 128
    2932:	bf e3       	ldi	r27, 0x3F	; 63
    2934:	89 8f       	std	Y+25, r24	; 0x19
    2936:	9a 8f       	std	Y+26, r25	; 0x1a
    2938:	ab 8f       	std	Y+27, r26	; 0x1b
    293a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293c:	69 8d       	ldd	r22, Y+25	; 0x19
    293e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2940:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2942:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	4a ef       	ldi	r20, 0xFA	; 250
    294a:	54 e4       	ldi	r21, 0x44	; 68
    294c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	8d 8b       	std	Y+21, r24	; 0x15
    2956:	9e 8b       	std	Y+22, r25	; 0x16
    2958:	af 8b       	std	Y+23, r26	; 0x17
    295a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    295c:	6d 89       	ldd	r22, Y+21	; 0x15
    295e:	7e 89       	ldd	r23, Y+22	; 0x16
    2960:	8f 89       	ldd	r24, Y+23	; 0x17
    2962:	98 8d       	ldd	r25, Y+24	; 0x18
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	40 e8       	ldi	r20, 0x80	; 128
    296a:	5f e3       	ldi	r21, 0x3F	; 63
    296c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2970:	88 23       	and	r24, r24
    2972:	2c f4       	brge	.+10     	; 0x297e <LCD_voidDisplayChar+0x1ae>
		__ticks = 1;
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	9c 8b       	std	Y+20, r25	; 0x14
    297a:	8b 8b       	std	Y+19, r24	; 0x13
    297c:	3f c0       	rjmp	.+126    	; 0x29fc <LCD_voidDisplayChar+0x22c>
	else if (__tmp > 65535)
    297e:	6d 89       	ldd	r22, Y+21	; 0x15
    2980:	7e 89       	ldd	r23, Y+22	; 0x16
    2982:	8f 89       	ldd	r24, Y+23	; 0x17
    2984:	98 8d       	ldd	r25, Y+24	; 0x18
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	3f ef       	ldi	r19, 0xFF	; 255
    298a:	4f e7       	ldi	r20, 0x7F	; 127
    298c:	57 e4       	ldi	r21, 0x47	; 71
    298e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2992:	18 16       	cp	r1, r24
    2994:	4c f5       	brge	.+82     	; 0x29e8 <LCD_voidDisplayChar+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2996:	69 8d       	ldd	r22, Y+25	; 0x19
    2998:	7a 8d       	ldd	r23, Y+26	; 0x1a
    299a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    299c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	40 e2       	ldi	r20, 0x20	; 32
    29a4:	51 e4       	ldi	r21, 0x41	; 65
    29a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	bc 01       	movw	r22, r24
    29b0:	cd 01       	movw	r24, r26
    29b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	9c 8b       	std	Y+20, r25	; 0x14
    29bc:	8b 8b       	std	Y+19, r24	; 0x13
    29be:	0f c0       	rjmp	.+30     	; 0x29de <LCD_voidDisplayChar+0x20e>
    29c0:	88 ec       	ldi	r24, 0xC8	; 200
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	9a 8b       	std	Y+18, r25	; 0x12
    29c6:	89 8b       	std	Y+17, r24	; 0x11
    29c8:	89 89       	ldd	r24, Y+17	; 0x11
    29ca:	9a 89       	ldd	r25, Y+18	; 0x12
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	f1 f7       	brne	.-4      	; 0x29cc <LCD_voidDisplayChar+0x1fc>
    29d0:	9a 8b       	std	Y+18, r25	; 0x12
    29d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d4:	8b 89       	ldd	r24, Y+19	; 0x13
    29d6:	9c 89       	ldd	r25, Y+20	; 0x14
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	9c 8b       	std	Y+20, r25	; 0x14
    29dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29de:	8b 89       	ldd	r24, Y+19	; 0x13
    29e0:	9c 89       	ldd	r25, Y+20	; 0x14
    29e2:	00 97       	sbiw	r24, 0x00	; 0
    29e4:	69 f7       	brne	.-38     	; 0x29c0 <LCD_voidDisplayChar+0x1f0>
    29e6:	14 c0       	rjmp	.+40     	; 0x2a10 <LCD_voidDisplayChar+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e8:	6d 89       	ldd	r22, Y+21	; 0x15
    29ea:	7e 89       	ldd	r23, Y+22	; 0x16
    29ec:	8f 89       	ldd	r24, Y+23	; 0x17
    29ee:	98 8d       	ldd	r25, Y+24	; 0x18
    29f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	9c 8b       	std	Y+20, r25	; 0x14
    29fa:	8b 8b       	std	Y+19, r24	; 0x13
    29fc:	8b 89       	ldd	r24, Y+19	; 0x13
    29fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2a00:	98 8b       	std	Y+16, r25	; 0x10
    2a02:	8f 87       	std	Y+15, r24	; 0x0f
    2a04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a06:	98 89       	ldd	r25, Y+16	; 0x10
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	f1 f7       	brne	.-4      	; 0x2a08 <LCD_voidDisplayChar+0x238>
    2a0c:	98 8b       	std	Y+16, r25	; 0x10
    2a0e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		voidLcdHelper(u8LcdIndxCpy , u8CharCpy<<4);
    2a10:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a12:	98 2f       	mov	r25, r24
    2a14:	92 95       	swap	r25
    2a16:	90 7f       	andi	r25, 0xF0	; 240
    2a18:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a1a:	69 2f       	mov	r22, r25
    2a1c:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <voidLcdHelper>
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	a0 e8       	ldi	r26, 0x80	; 128
    2a26:	bf e3       	ldi	r27, 0x3F	; 63
    2a28:	8b 87       	std	Y+11, r24	; 0x0b
    2a2a:	9c 87       	std	Y+12, r25	; 0x0c
    2a2c:	ad 87       	std	Y+13, r26	; 0x0d
    2a2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	4a ef       	ldi	r20, 0xFA	; 250
    2a3e:	54 e4       	ldi	r21, 0x44	; 68
    2a40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	8f 83       	std	Y+7, r24	; 0x07
    2a4a:	98 87       	std	Y+8, r25	; 0x08
    2a4c:	a9 87       	std	Y+9, r26	; 0x09
    2a4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a50:	6f 81       	ldd	r22, Y+7	; 0x07
    2a52:	78 85       	ldd	r23, Y+8	; 0x08
    2a54:	89 85       	ldd	r24, Y+9	; 0x09
    2a56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e8       	ldi	r20, 0x80	; 128
    2a5e:	5f e3       	ldi	r21, 0x3F	; 63
    2a60:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a64:	88 23       	and	r24, r24
    2a66:	2c f4       	brge	.+10     	; 0x2a72 <LCD_voidDisplayChar+0x2a2>
		__ticks = 1;
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	9e 83       	std	Y+6, r25	; 0x06
    2a6e:	8d 83       	std	Y+5, r24	; 0x05
    2a70:	3f c0       	rjmp	.+126    	; 0x2af0 <LCD_voidDisplayChar+0x320>
	else if (__tmp > 65535)
    2a72:	6f 81       	ldd	r22, Y+7	; 0x07
    2a74:	78 85       	ldd	r23, Y+8	; 0x08
    2a76:	89 85       	ldd	r24, Y+9	; 0x09
    2a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	3f ef       	ldi	r19, 0xFF	; 255
    2a7e:	4f e7       	ldi	r20, 0x7F	; 127
    2a80:	57 e4       	ldi	r21, 0x47	; 71
    2a82:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a86:	18 16       	cp	r1, r24
    2a88:	4c f5       	brge	.+82     	; 0x2adc <LCD_voidDisplayChar+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	40 e2       	ldi	r20, 0x20	; 32
    2a98:	51 e4       	ldi	r21, 0x41	; 65
    2a9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	bc 01       	movw	r22, r24
    2aa4:	cd 01       	movw	r24, r26
    2aa6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	9e 83       	std	Y+6, r25	; 0x06
    2ab0:	8d 83       	std	Y+5, r24	; 0x05
    2ab2:	0f c0       	rjmp	.+30     	; 0x2ad2 <LCD_voidDisplayChar+0x302>
    2ab4:	88 ec       	ldi	r24, 0xC8	; 200
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	9c 83       	std	Y+4, r25	; 0x04
    2aba:	8b 83       	std	Y+3, r24	; 0x03
    2abc:	8b 81       	ldd	r24, Y+3	; 0x03
    2abe:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	f1 f7       	brne	.-4      	; 0x2ac0 <LCD_voidDisplayChar+0x2f0>
    2ac4:	9c 83       	std	Y+4, r25	; 0x04
    2ac6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aca:	9e 81       	ldd	r25, Y+6	; 0x06
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	9e 83       	std	Y+6, r25	; 0x06
    2ad0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad6:	00 97       	sbiw	r24, 0x00	; 0
    2ad8:	69 f7       	brne	.-38     	; 0x2ab4 <LCD_voidDisplayChar+0x2e4>
    2ada:	14 c0       	rjmp	.+40     	; 0x2b04 <LCD_voidDisplayChar+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2adc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ade:	78 85       	ldd	r23, Y+8	; 0x08
    2ae0:	89 85       	ldd	r24, Y+9	; 0x09
    2ae2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	9e 83       	std	Y+6, r25	; 0x06
    2aee:	8d 83       	std	Y+5, r24	; 0x05
    2af0:	8d 81       	ldd	r24, Y+5	; 0x05
    2af2:	9e 81       	ldd	r25, Y+6	; 0x06
    2af4:	9a 83       	std	Y+2, r25	; 0x02
    2af6:	89 83       	std	Y+1, r24	; 0x01
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	9a 81       	ldd	r25, Y+2	; 0x02
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	f1 f7       	brne	.-4      	; 0x2afc <LCD_voidDisplayChar+0x32c>
    2b00:	9a 83       	std	Y+2, r25	; 0x02
    2b02:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
	
}
    2b04:	ac 96       	adiw	r28, 0x2c	; 44
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	f8 94       	cli
    2b0a:	de bf       	out	0x3e, r29	; 62
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	cd bf       	out	0x3d, r28	; 61
    2b10:	cf 91       	pop	r28
    2b12:	df 91       	pop	r29
    2b14:	08 95       	ret

00002b16 <voidWriteCmd>:

static void voidWriteCmd(uint8 u8LcdIndxCpy , uint8 u8CmdCpy)
{
    2b16:	df 93       	push	r29
    2b18:	cf 93       	push	r28
    2b1a:	00 d0       	rcall	.+0      	; 0x2b1c <voidWriteCmd+0x6>
    2b1c:	cd b7       	in	r28, 0x3d	; 61
    2b1e:	de b7       	in	r29, 0x3e	; 62
    2b20:	89 83       	std	Y+1, r24	; 0x01
    2b22:	6a 83       	std	Y+2, r22	; 0x02
    // Rs  0
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Rs , DIO_LOW );
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
    2b26:	28 2f       	mov	r18, r24
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	c9 01       	movw	r24, r18
    2b2c:	88 0f       	add	r24, r24
    2b2e:	99 1f       	adc	r25, r25
    2b30:	82 0f       	add	r24, r18
    2b32:	93 1f       	adc	r25, r19
    2b34:	88 0f       	add	r24, r24
    2b36:	99 1f       	adc	r25, r25
    2b38:	88 0f       	add	r24, r24
    2b3a:	99 1f       	adc	r25, r25
    2b3c:	fc 01       	movw	r30, r24
    2b3e:	ed 57       	subi	r30, 0x7D	; 125
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	80 81       	ld	r24, Z
    2b44:	60 e0       	ldi	r22, 0x00	; 0
    2b46:	0e 94 b2 05 	call	0xb64	; 0xb64 <DIO_enuWritePin>
	
	voidLcdHelper( u8LcdIndxCpy, u8CmdCpy);
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	6a 81       	ldd	r22, Y+2	; 0x02
    2b4e:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <voidLcdHelper>
	

}
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	08 95       	ret

00002b5c <voidLcdHelper>:

static void voidLcdHelper(uint8 u8LcdIndxCpy , uint8 u8CmdDataCpy)
{
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
    2b64:	6f 97       	sbiw	r28, 0x1f	; 31
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	f8 94       	cli
    2b6a:	de bf       	out	0x3e, r29	; 62
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	cd bf       	out	0x3d, r28	; 61
    2b70:	8e 8f       	std	Y+30, r24	; 0x1e
    2b72:	6f 8f       	std	Y+31, r22	; 0x1f
	uint8 u8CntrLoc ;
	// RW  0
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Rw , DIO_LOW );
    2b74:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b76:	28 2f       	mov	r18, r24
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	c9 01       	movw	r24, r18
    2b7c:	88 0f       	add	r24, r24
    2b7e:	99 1f       	adc	r25, r25
    2b80:	82 0f       	add	r24, r18
    2b82:	93 1f       	adc	r25, r19
    2b84:	88 0f       	add	r24, r24
    2b86:	99 1f       	adc	r25, r25
    2b88:	01 96       	adiw	r24, 0x01	; 1
    2b8a:	88 0f       	add	r24, r24
    2b8c:	99 1f       	adc	r25, r25
    2b8e:	fc 01       	movw	r30, r24
    2b90:	ee 57       	subi	r30, 0x7E	; 126
    2b92:	ff 4f       	sbci	r31, 0xFF	; 255
    2b94:	80 81       	ld	r24, Z
    2b96:	60 e0       	ldi	r22, 0x00	; 0
    2b98:	0e 94 b2 05 	call	0xb64	; 0xb64 <DIO_enuWritePin>
	//latch start
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8En , DIO_HIGH );
    2b9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b9e:	28 2f       	mov	r18, r24
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	c9 01       	movw	r24, r18
    2ba4:	88 0f       	add	r24, r24
    2ba6:	99 1f       	adc	r25, r25
    2ba8:	82 0f       	add	r24, r18
    2baa:	93 1f       	adc	r25, r19
    2bac:	88 0f       	add	r24, r24
    2bae:	99 1f       	adc	r25, r25
    2bb0:	88 0f       	add	r24, r24
    2bb2:	99 1f       	adc	r25, r25
    2bb4:	fc 01       	movw	r30, r24
    2bb6:	eb 57       	subi	r30, 0x7B	; 123
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	80 81       	ld	r24, Z
    2bbc:	61 e0       	ldi	r22, 0x01	; 1
    2bbe:	0e 94 b2 05 	call	0xb64	; 0xb64 <DIO_enuWritePin>
	
	// check 4 bit 8
	if (LCD_astrConfigSet[u8LcdIndxCpy].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
    2bc2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bc4:	28 2f       	mov	r18, r24
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	c9 01       	movw	r24, r18
    2bca:	88 0f       	add	r24, r24
    2bcc:	99 1f       	adc	r25, r25
    2bce:	82 0f       	add	r24, r18
    2bd0:	93 1f       	adc	r25, r19
    2bd2:	88 0f       	add	r24, r24
    2bd4:	99 1f       	adc	r25, r25
    2bd6:	88 0f       	add	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	fc 01       	movw	r30, r24
    2bdc:	ee 57       	subi	r30, 0x7E	; 126
    2bde:	ff 4f       	sbci	r31, 0xFF	; 255
    2be0:	80 81       	ld	r24, Z
    2be2:	81 70       	andi	r24, 0x01	; 1
    2be4:	81 30       	cpi	r24, 0x01	; 1
    2be6:	89 f5       	brne	.+98     	; 0x2c4a <voidLcdHelper+0xee>
	{
		// send cmd or data 8 bit
		for (u8CntrLoc = 0; u8CntrLoc < 8 ; u8CntrLoc++)
    2be8:	1d 8e       	std	Y+29, r1	; 0x1d
    2bea:	2b c0       	rjmp	.+86     	; 0x2c42 <voidLcdHelper+0xe6>
		{                   /* Rakm elselka                                                          cmd or data  */
			DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Data[u8CntrLoc] , GET_BIT(u8CmdDataCpy,u8CntrLoc) );
    2bec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bee:	28 2f       	mov	r18, r24
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bf4:	48 2f       	mov	r20, r24
    2bf6:	50 e0       	ldi	r21, 0x00	; 0
    2bf8:	c9 01       	movw	r24, r18
    2bfa:	88 0f       	add	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	82 0f       	add	r24, r18
    2c00:	93 1f       	adc	r25, r19
    2c02:	88 0f       	add	r24, r24
    2c04:	99 1f       	adc	r25, r25
    2c06:	88 0f       	add	r24, r24
    2c08:	99 1f       	adc	r25, r25
    2c0a:	84 0f       	add	r24, r20
    2c0c:	95 1f       	adc	r25, r21
    2c0e:	fc 01       	movw	r30, r24
    2c10:	ea 57       	subi	r30, 0x7A	; 122
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	40 81       	ld	r20, Z
    2c16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c18:	28 2f       	mov	r18, r24
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c1e:	88 2f       	mov	r24, r24
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	b9 01       	movw	r22, r18
    2c24:	02 c0       	rjmp	.+4      	; 0x2c2a <voidLcdHelper+0xce>
    2c26:	75 95       	asr	r23
    2c28:	67 95       	ror	r22
    2c2a:	8a 95       	dec	r24
    2c2c:	e2 f7       	brpl	.-8      	; 0x2c26 <voidLcdHelper+0xca>
    2c2e:	cb 01       	movw	r24, r22
    2c30:	98 2f       	mov	r25, r24
    2c32:	91 70       	andi	r25, 0x01	; 1
    2c34:	84 2f       	mov	r24, r20
    2c36:	69 2f       	mov	r22, r25
    2c38:	0e 94 b2 05 	call	0xb64	; 0xb64 <DIO_enuWritePin>
	
	// check 4 bit 8
	if (LCD_astrConfigSet[u8LcdIndxCpy].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
	{
		// send cmd or data 8 bit
		for (u8CntrLoc = 0; u8CntrLoc < 8 ; u8CntrLoc++)
    2c3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c3e:	8f 5f       	subi	r24, 0xFF	; 255
    2c40:	8d 8f       	std	Y+29, r24	; 0x1d
    2c42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c44:	88 30       	cpi	r24, 0x08	; 8
    2c46:	90 f2       	brcs	.-92     	; 0x2bec <voidLcdHelper+0x90>
    2c48:	31 c0       	rjmp	.+98     	; 0x2cac <voidLcdHelper+0x150>
		}
	}
	else
	{
		// send cmd or data 4 bit
		for (u8CntrLoc = 4; u8CntrLoc < 8 ; u8CntrLoc++)
    2c4a:	84 e0       	ldi	r24, 0x04	; 4
    2c4c:	8d 8f       	std	Y+29, r24	; 0x1d
    2c4e:	2b c0       	rjmp	.+86     	; 0x2ca6 <voidLcdHelper+0x14a>
		{
			DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Data[u8CntrLoc] , GET_BIT(u8CmdDataCpy,u8CntrLoc) );
    2c50:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c52:	28 2f       	mov	r18, r24
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c58:	48 2f       	mov	r20, r24
    2c5a:	50 e0       	ldi	r21, 0x00	; 0
    2c5c:	c9 01       	movw	r24, r18
    2c5e:	88 0f       	add	r24, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	82 0f       	add	r24, r18
    2c64:	93 1f       	adc	r25, r19
    2c66:	88 0f       	add	r24, r24
    2c68:	99 1f       	adc	r25, r25
    2c6a:	88 0f       	add	r24, r24
    2c6c:	99 1f       	adc	r25, r25
    2c6e:	84 0f       	add	r24, r20
    2c70:	95 1f       	adc	r25, r21
    2c72:	fc 01       	movw	r30, r24
    2c74:	ea 57       	subi	r30, 0x7A	; 122
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	40 81       	ld	r20, Z
    2c7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c7c:	28 2f       	mov	r18, r24
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c82:	88 2f       	mov	r24, r24
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	b9 01       	movw	r22, r18
    2c88:	02 c0       	rjmp	.+4      	; 0x2c8e <voidLcdHelper+0x132>
    2c8a:	75 95       	asr	r23
    2c8c:	67 95       	ror	r22
    2c8e:	8a 95       	dec	r24
    2c90:	e2 f7       	brpl	.-8      	; 0x2c8a <voidLcdHelper+0x12e>
    2c92:	cb 01       	movw	r24, r22
    2c94:	98 2f       	mov	r25, r24
    2c96:	91 70       	andi	r25, 0x01	; 1
    2c98:	84 2f       	mov	r24, r20
    2c9a:	69 2f       	mov	r22, r25
    2c9c:	0e 94 b2 05 	call	0xb64	; 0xb64 <DIO_enuWritePin>
		}
	}
	else
	{
		// send cmd or data 4 bit
		for (u8CntrLoc = 4; u8CntrLoc < 8 ; u8CntrLoc++)
    2ca0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ca2:	8f 5f       	subi	r24, 0xFF	; 255
    2ca4:	8d 8f       	std	Y+29, r24	; 0x1d
    2ca6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ca8:	88 30       	cpi	r24, 0x08	; 8
    2caa:	90 f2       	brcs	.-92     	; 0x2c50 <voidLcdHelper+0xf4>
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	a0 e2       	ldi	r26, 0x20	; 32
    2cb2:	b1 e4       	ldi	r27, 0x41	; 65
    2cb4:	89 8f       	std	Y+25, r24	; 0x19
    2cb6:	9a 8f       	std	Y+26, r25	; 0x1a
    2cb8:	ab 8f       	std	Y+27, r26	; 0x1b
    2cba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cbc:	69 8d       	ldd	r22, Y+25	; 0x19
    2cbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	4a ef       	ldi	r20, 0xFA	; 250
    2cca:	54 e4       	ldi	r21, 0x44	; 68
    2ccc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	8d 8b       	std	Y+21, r24	; 0x15
    2cd6:	9e 8b       	std	Y+22, r25	; 0x16
    2cd8:	af 8b       	std	Y+23, r26	; 0x17
    2cda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cdc:	6d 89       	ldd	r22, Y+21	; 0x15
    2cde:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	40 e8       	ldi	r20, 0x80	; 128
    2cea:	5f e3       	ldi	r21, 0x3F	; 63
    2cec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2cf0:	88 23       	and	r24, r24
    2cf2:	2c f4       	brge	.+10     	; 0x2cfe <voidLcdHelper+0x1a2>
		__ticks = 1;
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	9c 8b       	std	Y+20, r25	; 0x14
    2cfa:	8b 8b       	std	Y+19, r24	; 0x13
    2cfc:	3f c0       	rjmp	.+126    	; 0x2d7c <voidLcdHelper+0x220>
	else if (__tmp > 65535)
    2cfe:	6d 89       	ldd	r22, Y+21	; 0x15
    2d00:	7e 89       	ldd	r23, Y+22	; 0x16
    2d02:	8f 89       	ldd	r24, Y+23	; 0x17
    2d04:	98 8d       	ldd	r25, Y+24	; 0x18
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	3f ef       	ldi	r19, 0xFF	; 255
    2d0a:	4f e7       	ldi	r20, 0x7F	; 127
    2d0c:	57 e4       	ldi	r21, 0x47	; 71
    2d0e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d12:	18 16       	cp	r1, r24
    2d14:	4c f5       	brge	.+82     	; 0x2d68 <voidLcdHelper+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d16:	69 8d       	ldd	r22, Y+25	; 0x19
    2d18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e2       	ldi	r20, 0x20	; 32
    2d24:	51 e4       	ldi	r21, 0x41	; 65
    2d26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	bc 01       	movw	r22, r24
    2d30:	cd 01       	movw	r24, r26
    2d32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	9c 8b       	std	Y+20, r25	; 0x14
    2d3c:	8b 8b       	std	Y+19, r24	; 0x13
    2d3e:	0f c0       	rjmp	.+30     	; 0x2d5e <voidLcdHelper+0x202>
    2d40:	88 ec       	ldi	r24, 0xC8	; 200
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	9a 8b       	std	Y+18, r25	; 0x12
    2d46:	89 8b       	std	Y+17, r24	; 0x11
    2d48:	89 89       	ldd	r24, Y+17	; 0x11
    2d4a:	9a 89       	ldd	r25, Y+18	; 0x12
    2d4c:	01 97       	sbiw	r24, 0x01	; 1
    2d4e:	f1 f7       	brne	.-4      	; 0x2d4c <voidLcdHelper+0x1f0>
    2d50:	9a 8b       	std	Y+18, r25	; 0x12
    2d52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d54:	8b 89       	ldd	r24, Y+19	; 0x13
    2d56:	9c 89       	ldd	r25, Y+20	; 0x14
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	9c 8b       	std	Y+20, r25	; 0x14
    2d5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d60:	9c 89       	ldd	r25, Y+20	; 0x14
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	69 f7       	brne	.-38     	; 0x2d40 <voidLcdHelper+0x1e4>
    2d66:	14 c0       	rjmp	.+40     	; 0x2d90 <voidLcdHelper+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d68:	6d 89       	ldd	r22, Y+21	; 0x15
    2d6a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d6c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d6e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	9c 8b       	std	Y+20, r25	; 0x14
    2d7a:	8b 8b       	std	Y+19, r24	; 0x13
    2d7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d80:	98 8b       	std	Y+16, r25	; 0x10
    2d82:	8f 87       	std	Y+15, r24	; 0x0f
    2d84:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d86:	98 89       	ldd	r25, Y+16	; 0x10
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	f1 f7       	brne	.-4      	; 0x2d88 <voidLcdHelper+0x22c>
    2d8c:	98 8b       	std	Y+16, r25	; 0x10
    2d8e:	8f 87       	std	Y+15, r24	; 0x0f
		}
	}
	
	//latch
	_delay_ms(10);
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8En , DIO_LOW );
    2d90:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d92:	28 2f       	mov	r18, r24
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	c9 01       	movw	r24, r18
    2d98:	88 0f       	add	r24, r24
    2d9a:	99 1f       	adc	r25, r25
    2d9c:	82 0f       	add	r24, r18
    2d9e:	93 1f       	adc	r25, r19
    2da0:	88 0f       	add	r24, r24
    2da2:	99 1f       	adc	r25, r25
    2da4:	88 0f       	add	r24, r24
    2da6:	99 1f       	adc	r25, r25
    2da8:	fc 01       	movw	r30, r24
    2daa:	eb 57       	subi	r30, 0x7B	; 123
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	80 81       	ld	r24, Z
    2db0:	60 e0       	ldi	r22, 0x00	; 0
    2db2:	0e 94 b2 05 	call	0xb64	; 0xb64 <DIO_enuWritePin>
    2db6:	80 e0       	ldi	r24, 0x00	; 0
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	a0 e2       	ldi	r26, 0x20	; 32
    2dbc:	b1 e4       	ldi	r27, 0x41	; 65
    2dbe:	8b 87       	std	Y+11, r24	; 0x0b
    2dc0:	9c 87       	std	Y+12, r25	; 0x0c
    2dc2:	ad 87       	std	Y+13, r26	; 0x0d
    2dc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	4a ef       	ldi	r20, 0xFA	; 250
    2dd4:	54 e4       	ldi	r21, 0x44	; 68
    2dd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	8f 83       	std	Y+7, r24	; 0x07
    2de0:	98 87       	std	Y+8, r25	; 0x08
    2de2:	a9 87       	std	Y+9, r26	; 0x09
    2de4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2de6:	6f 81       	ldd	r22, Y+7	; 0x07
    2de8:	78 85       	ldd	r23, Y+8	; 0x08
    2dea:	89 85       	ldd	r24, Y+9	; 0x09
    2dec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	40 e8       	ldi	r20, 0x80	; 128
    2df4:	5f e3       	ldi	r21, 0x3F	; 63
    2df6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2dfa:	88 23       	and	r24, r24
    2dfc:	2c f4       	brge	.+10     	; 0x2e08 <voidLcdHelper+0x2ac>
		__ticks = 1;
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	9e 83       	std	Y+6, r25	; 0x06
    2e04:	8d 83       	std	Y+5, r24	; 0x05
    2e06:	3f c0       	rjmp	.+126    	; 0x2e86 <voidLcdHelper+0x32a>
	else if (__tmp > 65535)
    2e08:	6f 81       	ldd	r22, Y+7	; 0x07
    2e0a:	78 85       	ldd	r23, Y+8	; 0x08
    2e0c:	89 85       	ldd	r24, Y+9	; 0x09
    2e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	3f ef       	ldi	r19, 0xFF	; 255
    2e14:	4f e7       	ldi	r20, 0x7F	; 127
    2e16:	57 e4       	ldi	r21, 0x47	; 71
    2e18:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e1c:	18 16       	cp	r1, r24
    2e1e:	4c f5       	brge	.+82     	; 0x2e72 <voidLcdHelper+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	40 e2       	ldi	r20, 0x20	; 32
    2e2e:	51 e4       	ldi	r21, 0x41	; 65
    2e30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	bc 01       	movw	r22, r24
    2e3a:	cd 01       	movw	r24, r26
    2e3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	9e 83       	std	Y+6, r25	; 0x06
    2e46:	8d 83       	std	Y+5, r24	; 0x05
    2e48:	0f c0       	rjmp	.+30     	; 0x2e68 <voidLcdHelper+0x30c>
    2e4a:	88 ec       	ldi	r24, 0xC8	; 200
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	9c 83       	std	Y+4, r25	; 0x04
    2e50:	8b 83       	std	Y+3, r24	; 0x03
    2e52:	8b 81       	ldd	r24, Y+3	; 0x03
    2e54:	9c 81       	ldd	r25, Y+4	; 0x04
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	f1 f7       	brne	.-4      	; 0x2e56 <voidLcdHelper+0x2fa>
    2e5a:	9c 83       	std	Y+4, r25	; 0x04
    2e5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e60:	9e 81       	ldd	r25, Y+6	; 0x06
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	9e 83       	std	Y+6, r25	; 0x06
    2e66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e68:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6c:	00 97       	sbiw	r24, 0x00	; 0
    2e6e:	69 f7       	brne	.-38     	; 0x2e4a <voidLcdHelper+0x2ee>
    2e70:	14 c0       	rjmp	.+40     	; 0x2e9a <voidLcdHelper+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e72:	6f 81       	ldd	r22, Y+7	; 0x07
    2e74:	78 85       	ldd	r23, Y+8	; 0x08
    2e76:	89 85       	ldd	r24, Y+9	; 0x09
    2e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	9e 83       	std	Y+6, r25	; 0x06
    2e84:	8d 83       	std	Y+5, r24	; 0x05
    2e86:	8d 81       	ldd	r24, Y+5	; 0x05
    2e88:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8a:	9a 83       	std	Y+2, r25	; 0x02
    2e8c:	89 83       	std	Y+1, r24	; 0x01
    2e8e:	89 81       	ldd	r24, Y+1	; 0x01
    2e90:	9a 81       	ldd	r25, Y+2	; 0x02
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	f1 f7       	brne	.-4      	; 0x2e92 <voidLcdHelper+0x336>
    2e96:	9a 83       	std	Y+2, r25	; 0x02
    2e98:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	
}
    2e9a:	6f 96       	adiw	r28, 0x1f	; 31
    2e9c:	0f b6       	in	r0, 0x3f	; 63
    2e9e:	f8 94       	cli
    2ea0:	de bf       	out	0x3e, r29	; 62
    2ea2:	0f be       	out	0x3f, r0	; 63
    2ea4:	cd bf       	out	0x3d, r28	; 61
    2ea6:	cf 91       	pop	r28
    2ea8:	df 91       	pop	r29
    2eaa:	08 95       	ret

00002eac <main>:
#include "DIO.h"
#include "LCD.h"
#include "KEYPAD.h"

void main(void)
{
    2eac:	df 93       	push	r29
    2eae:	cf 93       	push	r28
    2eb0:	0f 92       	push	r0
    2eb2:	cd b7       	in	r28, 0x3d	; 61
    2eb4:	de b7       	in	r29, 0x3e	; 62

	DIO_voidInit();
    2eb6:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidInit>
	LCD_voidInit();
    2eba:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LCD_voidInit>
	KEYPAD_voidInit();
    2ebe:	0e 94 b7 07 	call	0xf6e	; 0xf6e <KEYPAD_voidInit>
	uint8 u8PressedLoc;
	while(1)
	{

		u8PressedLoc = KEYPAD_u8GetPressedKey(0);
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	0e 94 2e 08 	call	0x105c	; 0x105c <KEYPAD_u8GetPressedKey>
    2ec8:	89 83       	std	Y+1, r24	; 0x01
		if( u8PressedLoc != 0xFF)
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	8f 3f       	cpi	r24, 0xFF	; 255
    2ece:	c9 f3       	breq	.-14     	; 0x2ec2 <main+0x16>
		{
			LCD_voidDisplayChar(0, u8PressedLoc);
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	69 81       	ldd	r22, Y+1	; 0x01
    2ed4:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <LCD_voidDisplayChar>
    2ed8:	f4 cf       	rjmp	.-24     	; 0x2ec2 <main+0x16>

00002eda <__prologue_saves__>:
    2eda:	2f 92       	push	r2
    2edc:	3f 92       	push	r3
    2ede:	4f 92       	push	r4
    2ee0:	5f 92       	push	r5
    2ee2:	6f 92       	push	r6
    2ee4:	7f 92       	push	r7
    2ee6:	8f 92       	push	r8
    2ee8:	9f 92       	push	r9
    2eea:	af 92       	push	r10
    2eec:	bf 92       	push	r11
    2eee:	cf 92       	push	r12
    2ef0:	df 92       	push	r13
    2ef2:	ef 92       	push	r14
    2ef4:	ff 92       	push	r15
    2ef6:	0f 93       	push	r16
    2ef8:	1f 93       	push	r17
    2efa:	cf 93       	push	r28
    2efc:	df 93       	push	r29
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	ca 1b       	sub	r28, r26
    2f04:	db 0b       	sbc	r29, r27
    2f06:	0f b6       	in	r0, 0x3f	; 63
    2f08:	f8 94       	cli
    2f0a:	de bf       	out	0x3e, r29	; 62
    2f0c:	0f be       	out	0x3f, r0	; 63
    2f0e:	cd bf       	out	0x3d, r28	; 61
    2f10:	09 94       	ijmp

00002f12 <__epilogue_restores__>:
    2f12:	2a 88       	ldd	r2, Y+18	; 0x12
    2f14:	39 88       	ldd	r3, Y+17	; 0x11
    2f16:	48 88       	ldd	r4, Y+16	; 0x10
    2f18:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f1a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f1c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f1e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f20:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f22:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f24:	b9 84       	ldd	r11, Y+9	; 0x09
    2f26:	c8 84       	ldd	r12, Y+8	; 0x08
    2f28:	df 80       	ldd	r13, Y+7	; 0x07
    2f2a:	ee 80       	ldd	r14, Y+6	; 0x06
    2f2c:	fd 80       	ldd	r15, Y+5	; 0x05
    2f2e:	0c 81       	ldd	r16, Y+4	; 0x04
    2f30:	1b 81       	ldd	r17, Y+3	; 0x03
    2f32:	aa 81       	ldd	r26, Y+2	; 0x02
    2f34:	b9 81       	ldd	r27, Y+1	; 0x01
    2f36:	ce 0f       	add	r28, r30
    2f38:	d1 1d       	adc	r29, r1
    2f3a:	0f b6       	in	r0, 0x3f	; 63
    2f3c:	f8 94       	cli
    2f3e:	de bf       	out	0x3e, r29	; 62
    2f40:	0f be       	out	0x3f, r0	; 63
    2f42:	cd bf       	out	0x3d, r28	; 61
    2f44:	ed 01       	movw	r28, r26
    2f46:	08 95       	ret

00002f48 <_exit>:
    2f48:	f8 94       	cli

00002f4a <__stop_program>:
    2f4a:	ff cf       	rjmp	.-2      	; 0x2f4a <__stop_program>
